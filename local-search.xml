<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vue2项目中封装echarts地图比较优雅的方式</title>
    <link href="/2022/03/08/vue2%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%B0%81%E8%A3%85echarts%E5%9C%B0%E5%9B%BE%E6%AF%94%E8%BE%83%E4%BC%98%E9%9B%85%E7%9A%84%E6%96%B9%E5%BC%8F%20/"/>
    <url>/2022/03/08/vue2%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%B0%81%E8%A3%85echarts%E5%9C%B0%E5%9B%BE%E6%AF%94%E8%BE%83%E4%BC%98%E9%9B%85%E7%9A%84%E6%96%B9%E5%BC%8F%20/</url>
    
    <content type="html"><![CDATA[<p>以前写过 <a href="https://juejin.cn/post/6995518429952212999">vue项目中封装echarts的比较优雅的方式</a>，大屏可视化里面，除了数据图表很常用，显示省市地图区域也是很常用到的，这是姐妹篇。</p><p>区域地图选区域时，需要弹窗展示数据，样式是各种各样的，各种排列的数据、图文混搭、视频……这里除了封装echarts区域地图模块，还介绍了下自定义弹窗的实现、自定义弹窗动态加载接口数据的方式</p><h2 id="能学到的知识"><a href="#能学到的知识" class="headerlink" title="能学到的知识"></a>能学到的知识</h2><ul><li>1、echarts地图模块封装，可复用</li><li>2、echarts地图自定义弹窗（显示自定义样式、自定义数据、自定义图片），其它图表的自定义弹窗可参考。</li><li> 3、echarts地图自定义弹窗动态展示接口数据</li><li>4、基于姐姐篇实现的，这个地图模块也是自适应的</li><li>5、基于<code>vue2</code> 、<code>vue cli3</code>、<code>echarts 5</code></li></ul><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p>先上个效果图吧，说明下实现的效果。</p><ul><li>1、以广州区域地图为例</li><li>2、自定义弹窗，显示选中地区的名称、区号，弹窗加了个小图片</li><li>3、基本上图片、视频什么的，都可以在自定义弹窗上显示，这里只展示下自定义弹窗加图片的方式，视频同理的，不介绍了，有兴趣自己随便试试就好</li><li> 4、弹窗数据是从模拟接口取的</li></ul><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d6ae6a7f2d014e4296e1dcd9d017b6f6~tplv-k3u1fbpfcp-watermark.image" alt="Snip20220308_16.png"></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><h3 id="1、vue中echarts-5-x以下版本和5-x以上版本引入的区别"><a href="#1、vue中echarts-5-x以下版本和5-x以上版本引入的区别" class="headerlink" title="1、vue中echarts 5.x以下版本和5.x以上版本引入的区别"></a>1、vue中echarts <code>5.x</code>以下版本和<code>5.x</code>以上版本引入的区别</h3><h4 id="5-x以下版本"><a href="#5-x以下版本" class="headerlink" title="5.x以下版本"></a><code>5.x</code>以下版本</h4><figure class="highlight clean"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> echarts <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;echarts&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="5-x以上版本"><a href="#5-x以上版本" class="headerlink" title="5.x以上版本"></a><code>5.x</code>以上版本</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> echarts <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;echarts&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="2、记得在vue-config-js中开启运行时编译功能"><a href="#2、记得在vue-config-js中开启运行时编译功能" class="headerlink" title="2、记得在vue.config.js中开启运行时编译功能"></a>2、记得在<code>vue.config.js</code>中开启运行时编译功能</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">runtimeCompiler:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">|-- public</span><br><span class="hljs-string">|-- data</span><br><span class="hljs-string">|-- 4401.json</span><br><span class="hljs-string">|-- mapdata.json</span><br><span class="hljs-string">|-- images</span><br><span class="hljs-string">|-- map-ic.png</span><br></code></pre></td></tr></table></figure><ul><li>1、<code>4401.json</code>是广州区域的<code>geojson</code>数据，用来给<code>echarts</code>显示广州的区域地图</li><li>2、<code>mapdata.json</code>是模拟接口请求的假数据，自己随便自定义了，在获取数据后，看情况处理下传到封装好的echarts地图模块就行，这里模拟接口请求的知识可参考这里： <a href="https://juejin.cn/post/6995147964427534373/">vue本地模拟服务器请求mock数据</a></li><li>3、<code>map-ic.png</code>地图自定义弹窗用到的图片</li></ul><h3 id="echarts地图模块封装"><a href="#echarts地图模块封装" class="headerlink" title="echarts地图模块封装"></a>echarts地图模块封装</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">|-- src</span><br>    <span class="hljs-string">|-- components</span><br>        <span class="hljs-string">|-- chart</span><br>            <span class="hljs-string">|-- options    // 存放各种图表的option</span><br>                <span class="hljs-string">|-- map    // 地图option</span><br>                    <span class="hljs-string">|-- index.js</span><br></code></pre></td></tr></table></figure><p>封装的地图模块，具体代码如下：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> echarts <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;echarts&#x27;</span><br><br>const getSimpleMap = <span class="hljs-function"><span class="hljs-params">(jsonMap, data, config)</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (!echarts.getMap(jsonMap.mark)) &#123;<br>    echarts.registerMap(jsonMap.mark, jsonMap.json)<br>  &#125;<br>  const defaultConfig = &#123;<br>    tooltip: &#123;<br>      <span class="hljs-regexp">//</span> 窗口外框<br>      trigger: <span class="hljs-string">&#x27;item&#x27;</span>,<br>      padding: <span class="hljs-number">0</span>,<br>      borderWidth: <span class="hljs-number">0</span>,<br>      borderColor: <span class="hljs-string">&#x27;#FFFFFF&#x27;</span>,<br>      backgroundColor: <span class="hljs-string">&#x27;#FFFFFF&#x27;</span>,<br>      formatter: <span class="hljs-function"><span class="hljs-params">(params)</span> =&gt;</span> &#123;<br>        const &#123; data &#125; = params<br>        const str = `<span class="language-javascript">&lt;div style=<span class="hljs-string">&quot;width:300px;height: 98px;box-shadow: 0px 4px 20px 0px rgba(0, 0, 0, 0.8);</span></span><br><span class="hljs-string"><span class="language-javascript">                    color: #fff;text-align:left;border-radius: 6px;&quot;</span>&gt;</span><br><span class="language-javascript">                    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: rgba(102, 182, 255, 1);height: 44px;line-height: 44px;font-size:14px;font-weight:400;border-top-left-radius: 6px;border-top-right-radius: 6px;display: flex;align-items: center;&quot;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 13px;height:16px;margin-left: 24px;margin-right: 3px;&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/map-ic.png&quot;</span>&gt;</span>$&#123;data.name&#125;</span></span><br><span class="language-xml"><span class="language-javascript">                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%;height:54px;display: flex;flex-wrap: wrap;&quot;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: flex;justify-content: space-between;width: 100%;padding-left:15px;padding-right: 15px;&quot;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:flex;align-items:center;width:132px;&quot;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 12px;color: #555555;margin-right:10px;&quot;</span>&gt;</span>区号：<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 14px;color: #333333;&quot;</span>&gt;</span>$&#123;data.hoverObj == null ? &#x27;&#x27; : data.hoverObj.adcode&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span>`<br>        <span class="hljs-keyword">return</span> str<br>      &#125;<br>    &#125;,<br>    geo: &#123;<br>      map: jsonMap.mark,<br>      type: <span class="hljs-string">&#x27;map&#x27;</span>,<br>      layoutCenter: [<span class="hljs-string">&#x27;50%&#x27;</span>, <span class="hljs-string">&#x27;50%&#x27;</span>],<br>      layoutSize: <span class="hljs-string">&#x27;150%&#x27;</span>,<br>      zoom: <span class="hljs-number">0.65</span>,<br>      roam: <span class="hljs-literal">false</span>,<br>      itemStyle: &#123;<br>        normal: &#123;<br>          areaColor: <span class="hljs-string">&#x27;rgba(201, 229, 255, 1)&#x27;</span>,<br>          shadowColor: <span class="hljs-string">&#x27;rgba(142, 201, 255, 1)&#x27;</span>,<br>          shadowOffsetX: <span class="hljs-number">-5</span>,<br>          shadowOffsetY: <span class="hljs-number">12</span><br>        &#125;<br>      &#125;<br>    &#125;,<br>    series: [<br>      &#123;<br>        type: <span class="hljs-string">&#x27;map&#x27;</span>,<br>        map: jsonMap.mark, <span class="hljs-regexp">//</span> 自定义扩展图表类型<br>        zoom: <span class="hljs-number">0.65</span>, <span class="hljs-regexp">//</span> 缩放<br>        animationDuration: <span class="hljs-number">1200</span>,<br>        itemStyle: &#123;<br>          <span class="hljs-regexp">//</span> 地图样式<br>          normal: &#123;<br>            borderColor: <span class="hljs-string">&#x27;#FFFFFF&#x27;</span>,<br>            borderWidth: <span class="hljs-number">3</span>,<br>            areaColor: <span class="hljs-string">&#x27;rgba(201, 229, 255, 1)&#x27;</span><br>          &#125;<br>        &#125;,<br>        label: &#123;<br>          show: <span class="hljs-literal">true</span>,<br>          color: <span class="hljs-string">&#x27;#666666&#x27;</span>,<br>          fontSize: <span class="hljs-number">12</span>,<br>          fontWeight: <span class="hljs-number">400</span><br>        &#125;,<br>        emphasis: &#123;<br>          <span class="hljs-regexp">//</span> 鼠标移入动态的时候显示的默认样式<br>          label: &#123;<br>            show: <span class="hljs-literal">true</span>,<br>            color: <span class="hljs-string">&#x27;#FFFFFF&#x27;</span>,<br>            fontSize: <span class="hljs-number">15</span>,<br>            fontWeight: <span class="hljs-number">600</span><br>          &#125;,<br>          itemStyle: &#123;<br>            areaColor: <span class="hljs-string">&#x27;rgba(102, 182, 255, 1)&#x27;</span>,<br>            borderColor: <span class="hljs-string">&#x27;#FFFFFF&#x27;</span>,<br>            borderWidth: <span class="hljs-number">2</span><br>          &#125;<br>        &#125;,<br>        layoutCenter: [<span class="hljs-string">&#x27;50%&#x27;</span>, <span class="hljs-string">&#x27;50%&#x27;</span>],<br>        layoutSize: <span class="hljs-string">&#x27;150%&#x27;</span>,<br>        data: data<br>      &#125;<br>    ]<br>  &#125;<br>  const opt = <span class="hljs-built_in">Object</span>.assign(&#123;&#125;, defaultConfig, config)<br>  const &#123; legend, tooltip, series, geo, grid &#125; = opt<br>  const chartOpt = &#123;<br>    grid,<br>    legend,<br>    tooltip,<br>    geo,<br>    series<br>  &#125;<br>  <span class="hljs-keyword">return</span> chartOpt<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  getSimpleMap<br>&#125;<br></code></pre></td></tr></table></figure><p>自定义弹窗主要是在<code>tooltip</code>的<code>formatter</code>里面实现，自定义好<code>html</code>弹窗，把<code>params</code>里要显示的数据显示到对应的地方就OK了。</p><p>个人喜欢直接纯<code>html</code>实现好设计给的弹窗样式，然后直接复制到<code>formatter</code>里面。每次遇到不同的设计，就修改下<code>formatter</code>里面的<code>html</code>和匹配下要显示的数据就行了。这里可以进一步封装的，有兴趣的可以试试。</p><h3 id="页面调用"><a href="#页面调用" class="headerlink" title="页面调用"></a>页面调用</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;chart-view<br>      class=<span class="hljs-string">&quot;map-view&quot;</span><br>      <span class="hljs-symbol">:chart-option=<span class="hljs-string">&quot;mapOpt&quot;</span></span><br>      height=<span class="hljs-string">&quot;100%&quot;</span><br>      <span class="hljs-variable">@click</span>=<span class="hljs-string">&quot;handleMapClick&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><ul><li>1、<code> :chart-option=&quot;mapOpt&quot;</code>这个是给封装的<code>echarts</code>地图模块的传参，接口数据要经过处理，具体看下一节</li><li>2、<code>@click=&quot;handleMapClick&quot;</code>这里是点击地图时，对应区域的数据，用于有下一步的操作，例如地图下钻</li></ul><h3 id="接口数据处理"><a href="#接口数据处理" class="headerlink" title="接口数据处理"></a>接口数据处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">initMap</span>(<span class="hljs-params">url</span>) &#123;<br>    <span class="hljs-title function_">mapRequest</span>(url).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> mapData = res.<span class="hljs-property">data</span><br>        <span class="hljs-keyword">const</span> jsonMap = &#123; <span class="hljs-attr">mark</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">mapName</span>, <span class="hljs-attr">json</span>: mapData &#125;<br><br>        <span class="hljs-keyword">const</span> data = mapData.<span class="hljs-property">features</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">const</span> &#123; name, adcode &#125; = item.<span class="hljs-property">properties</span><br><br>          <span class="hljs-keyword">let</span> hoverObj = &#123;&#125;<br><br>          <span class="hljs-keyword">const</span> objIndex = <span class="hljs-title function_">findElem</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">mapPopData</span>, <span class="hljs-string">&#x27;adcode&#x27;</span>, adcode)<br>          <span class="hljs-keyword">if</span> (objIndex !== -<span class="hljs-number">1</span>) &#123;<br>            hoverObj = <span class="hljs-variable language_">this</span>.<span class="hljs-property">mapPopData</span>[objIndex]<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            hoverObj = <span class="hljs-literal">null</span><br>          &#125;<br>          <span class="hljs-keyword">return</span> &#123;<br>            name,<br>            <span class="hljs-attr">hoverObj</span>: hoverObj<br>          &#125;<br>        &#125;)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">mapOpt</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$eChartFn</span>.<span class="hljs-title function_">getSimpleMap</span>(jsonMap, data)<br>    &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err, <span class="hljs-string">&#x27;加载地图失败&#x27;</span>)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>这里对地图<code>geojson</code>数据和接口返回数据进行匹配处理，达到弹窗数据是对应地区数据的效果。</p><p>地图<code>geojson</code>数据是必有<code>adcode</code>字段的，所以接口数据<code>mapPopData</code>最好也是加上此字段，用来匹配。<br>上面代码里的<code>hoverObj</code>是匹配好的每个区域的数据，最终形成数组<code>data</code>，通过以下代码给封装的<code>echarts</code>模块传参</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">this</span>.mapOpt = <span class="hljs-keyword">this</span>.$eChartFn.getSimpleMap(jsonMap, <span class="hljs-keyword">data</span>)<br></code></pre></td></tr></table></figure><p>具体代码可以参考<code>echartMapTest</code>文件夹里面的<code>index.js</code>文件</p><h2 id="代码总览"><a href="#代码总览" class="headerlink" title="代码总览"></a>代码总览</h2><p>涉及的文件如下（具体参考<code>代码</code>）：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">|-- public</span><br><span class="hljs-string">|-- data</span><br><span class="hljs-string">|-- 4401.json</span><br><span class="hljs-string">|-- mapdata.json</span><br><span class="hljs-string">|-- images</span><br><span class="hljs-string">|-- map-ic.png</span><br><span class="hljs-string">|-- src</span><br><span class="hljs-string">|-- api</span><br><span class="hljs-string">|-- map.js    // 获取地图geojson数据、地图弹窗接口模拟数据</span><br>    <span class="hljs-string">|-- components</span><br>        <span class="hljs-string">|-- chart</span><br>            <span class="hljs-string">|-- index.vue    // 图表单文件组件，供界面调用</span><br>            <span class="hljs-string">|-- index.js    // 实现自动化导入options里的图表option</span><br>            <span class="hljs-string">|-- options    // 存放各种图表的option</span><br>                <span class="hljs-string">|-- map    // 地图option</span><br>                    <span class="hljs-string">|-- index.js</span><br>    <span class="hljs-string">|-- views</span><br>        <span class="hljs-string">|-- echartMapTest    // 实例所在</span><br>            <span class="hljs-string">|-- index.vue</span><br>            <span class="hljs-string">|-- index.scss</span><br>            <span class="hljs-string">|-- index.js</span><br><span class="hljs-string">|-- utils</span><br><span class="hljs-string">|---utils.js</span><br><span class="hljs-string">|-- main.js    // 全局引入echarts图表</span><br></code></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>按<code>代码总览</code>的目录去<a href="https://github.com/liyoro/vue-skill">代码</a>里找着看就行了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上，就是对<code>echarts</code>地图模块的封装，还有自定义弹窗的实现。使用和复用都比较方便了。</p><p>最近才发现 <a href="https://www.makeapie.com/explore.html">www.makeapie.com</a> 停服了，挺好用的东西来的，感谢这么多年的奉献。</p><p>有需求的可转移到 <a href="http://ppchart.com/#/">PPChart</a>，算是一个替代品了</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>1、<a href="http://datav.aliyun.com/portal/school/atlas/area_selector">地图选择器</a></li><li>2、<a href="https://echarts.apache.org/zh/index.html">Echarts</a></li><li>2、<a href="https://juejin.cn/post/6995147964427534373/">vue本地模拟服务器请求mock数据</a></li><li>3、<a href="https://juejin.cn/post/6995518429952212999">vue项目中封装echarts的比较优雅的方式</a></li><li>4、<a href="https://juejin.cn/post/7072533871983591461">简单技巧分离vue文件的css、js代码，方便阅读开发</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>echarts</tag>
      
      <tag>地图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次浏览器SameSite策略更新，导致接口 Failed to load response data 的解决过程</title>
    <link href="/2022/01/22/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%B5%8F%E8%A7%88%E5%99%A8SameSite%E7%AD%96%E7%95%A5%E6%9B%B4%E6%96%B0%EF%BC%8C%E5%AF%BC%E8%87%B4%E6%8E%A5%E5%8F%A3%20Failed%20to%20load%20response%20data%20%E7%9A%84%E8%A7%A3%E5%86%B3%E8%BF%87%E7%A8%8B/"/>
    <url>/2022/01/22/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%B5%8F%E8%A7%88%E5%99%A8SameSite%E7%AD%96%E7%95%A5%E6%9B%B4%E6%96%B0%EF%BC%8C%E5%AF%BC%E8%87%B4%E6%8E%A5%E5%8F%A3%20Failed%20to%20load%20response%20data%20%E7%9A%84%E8%A7%A3%E5%86%B3%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>vue项目，本地开发本来好好的，浏览器升级后，突然就不行了。连页面都没渲染到<code>app</code>上，白屏了，如下：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ccdf11bcae2246e8bcfb375e53489e42~tplv-k3u1fbpfcp-watermark.image" alt="Snip20220120_2.png"></p><p>虽然本地开发无法加载页面了，但是<code>npm run build</code>后打包发布的代码，浏览器可以正常访问，完全没问题。</p><p>项目登录认证页面，是公司另外部门封装的一个统一认证页面，短期是无法通过代码层面解决问题的，所以看看浏览器更新后，发生了什么，看看能不能解决了。</p><h2 id="寻因"><a href="#寻因" class="headerlink" title="寻因"></a>寻因</h2><p>在开发者工具的<code>Network</code>里，找到登录认证的几个请求接口，发现有2个关键的接口，都返回了如下信息：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs pgsql">Failed <span class="hljs-keyword">to</span> <span class="hljs-keyword">load</span> response data: <span class="hljs-keyword">No</span> resource <span class="hljs-keyword">with</span> given identifier <span class="hljs-built_in">found</span><br></code></pre></td></tr></table></figure><p>接口无返回认证信息，导致渲染页面的流程也走不下去了，造成了页面渲染失败，白屏。</p><p>再看看控制台打印，发现<code>Console</code>里面有了新的告警，如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">由于 Cookie “JSESSIONID”缺少“SameSite”属性，且该属性的默认值为“<span class="hljs-attribute">SameSite</span>=Lax”，已将“SameSite”的策略设为“Lax”。<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">由于 Cookie “”缺少“SameSite”属性，且该属性的默认值为“<span class="hljs-attribute">SameSite</span>=Lax”，已将“SameSite”的策略设为“Lax”。<br></code></pre></td></tr></table></figure><p><code>SameSite</code>是 Chrome 51 版本后添加的一个属性，用来防止 CSRF 攻击和用户追踪（<a href="https://juejin.cn/post/7008455334830276644">相关资料</a>）。</p><p><code>SameSite</code>有3个属性：</p><ul><li><p><font color="#469dff">Strict</font> 最为严格，完全禁止第三方Cookie，跨站点时，任何情况下都不会发送Cookie。只有当前网页URL与请求目标URL完全一致才会带上Cookie。</p></li><li><p><font color="#469dff">Lax</font> 规则稍稍放宽，大多数情况也是不发送第三方Cookie，但是导航到目标网址的 Get 请求除外。</p></li><li><p><font color="#469dff">None</font> 网站可以选择显式关闭SameSite属性，将其设为None。不过，前提是必须同时设置Secure属性（Cookie 只能通过 HTTPS 协议发送），否则无效。</p></li></ul><p>通过以上信息，知道，更新后的浏览器，安全要求，接口报文里面的<code>set-cookie</code>要设置<code>SameSite </code>属性，默认将没有设置<code>SameSite</code>的请求设置为<code>SameSite=Lax</code>。</p><p>项目认证接口，在本地开发的情况下，是跨站点&amp;跨域 <font color="red">Get</font> 请求，接口没有设置<code>SameSite</code>属性，在浏览器默认设置<code>SameSite=Lax</code>的情况下，导致请求没带上<code>Cookie</code>，认证失败，接口不会返回数据，导致了接口<code>Failed to load response data</code>的问题。</p><p>发布生产时，认证接口是同源&amp;同站点 <font color="red">Get</font> 请求，就没问题了。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1、Chrome-51版本后91版本前"><a href="#1、Chrome-51版本后91版本前" class="headerlink" title="1、Chrome 51版本后91版本前"></a>1、Chrome 51版本后91版本前<h3 id="1"></h3></h3><p>运行本地项目调试时，某些接口需要使用cookie来校验，会涉及到cookie跨域丢失问题。对于前端来说，调试项目时想要实现浏览器跨域共享cookie，可以设置浏览器的实验属性，关闭浏览器的安全设置，操作如下：</p><ul><li>在Chrome地址栏输入<code>chrome://flags</code></li><li>把<code>SameSite by default cookies</code>、<code>Cookies without SameSite must be secure</code> 设置成<code>Disabled</code></li></ul><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bd0368d3f6bc463a8ea6a77ec9080d67~tplv-k3u1fbpfcp-watermark.image" alt="Snip20220120_3.png"></p><ul><li>重启浏览器生效</li></ul><h3 id="2、Chrome-91版本后"><a href="#2、Chrome-91版本后" class="headerlink" title="2、Chrome 91版本后"></a>2、Chrome 91版本后</h3><p>Chrome 91 版本后，Chrome实验属性 <code>SameSite by default cookies</code>、<code>Cookies without SameSite must be secure</code> 的设置消失了。临时解决办法就是安装旧版本的Chrome，因为本人是Mac下开发，只分享下Mac下安装旧版本浏览器的办法。</p><p>Mac下谷歌浏览器稳定版、dev版的旧版不能和新版共存，如果更新了最新浏览器，又不想降版本的，可以下载谷歌浏览器<code>canary</code>版（可以和稳定版、dev版共存），<a href="https://www.chromedownloads.net/chrome64osx/">各版本下载地址</a>，选择91前的版本，然后照着 <a href="#1">1</a> 的操作设置下就ok了。</p><h3 id="3、接口设置SameSite-none"><a href="#3、接口设置SameSite-none" class="headerlink" title="3、接口设置SameSite=none"></a>3、接口设置SameSite=none</h3><p>服务端将 response 的 header 设置<code>Set-Cookie:SameSite=None</code>，允许跨站请求发送 Cookie。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Set-cookie: <span class="hljs-attribute">key</span>=value; <span class="hljs-attribute">SameSite</span>=None; Secure<br></code></pre></td></tr></table></figure><ul><li>注意1：接口必须是<code>https</code></li><li>注意2：需要 <code>UA</code> 检测，部分浏览器不能加 <code>SameSite=none</code></li></ul><p>IOS 12的 Safari 以及老版本的一些 Chrome 会把 <code>SameSite=none</code> 识别成 <code>SameSite=Strict</code>，所以服务端必须在下发 <code>Set-Cookie</code> 响应头时进行 User-Agent 检测，对这些浏览器不下发<code>SameSite=none</code>属性</p><h3 id="4、用火狐"><a href="#4、用火狐" class="headerlink" title="4、用火狐"></a>4、用火狐</h3><p>不知道Windows下什么情况，反正Mac很幸运的，在升级 <em>96</em> 版本后也不行了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当接口依赖<code>Cookie</code>时，前端不发送<code>Cookie</code>，会造成接口不返回数据的问题。也就是文章开头的<br><code>Failed to load response data: No resource with given identifier found</code>问题。</p><p>浏览器对前端安全和用户隐私越来越重视了，现在是浏览器默认策略倒逼接口安全升级了。</p><p>一些通用服务接口，最好是服务端设置解决了。不然第三方开发过程中，遇到本文所述问题，真的很无语的，说是前端的问题也行，说不是前端的问题，貌似也没错。随着浏览器安全策略的不断更新，服务端接口的安全策略也要随着更新了，特别是一些不需要收集用户信息、不搞广告的项目，生产环境严格执行<code>SameSite</code>的安全策略其实也没啥问题的，反而更好。供第三方开发时，说明下注意的设置就好了。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p>1、<a href="https://juejin.cn/post/6844904096655212558">Chrome浏览器改变SameSite设置</a></p></li><li><p>2、<a href="https://juejin.cn/post/7008455334830276644">【Cookie 的 SameSite 属性】当Chrome版本升级后三方Cookie被禁用</a></p></li><li><p>3、<a href="https://juejin.cn/post/6844904095711494151">预测最近面试会考 Cookie 的 SameSite 属性</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>错误</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>video-time-slider，用于IVR视频回播的时间选择插件</title>
    <link href="/2022/01/10/video-time-slider%EF%BC%8C%E7%94%A8%E4%BA%8EIVR%E8%A7%86%E9%A2%91%E5%9B%9E%E6%92%AD%E7%9A%84%E6%97%B6%E9%97%B4%E9%80%89%E6%8B%A9%E6%8F%92%E4%BB%B6/"/>
    <url>/2022/01/10/video-time-slider%EF%BC%8C%E7%94%A8%E4%BA%8EIVR%E8%A7%86%E9%A2%91%E5%9B%9E%E6%92%AD%E7%9A%84%E6%97%B6%E9%97%B4%E9%80%89%E6%8B%A9%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>用于IVR视频回播的时间选择插件，刻度尺的实现参考了<a href="https://ext.dcloud.net.cn/plugin?id=4567">vue语法css实现刻度尺</a>，为项目微信小程序制作。基于<code>uni-app</code>开发。目前没找到类似的插件，所以才动手实现了一个，是不是做视频的同行太少了，还是你们太低调了<del>。</del></p><p>其实这个可以做成前端通用组件的，因为本人项目只在微信小程序使用此插件，就先做成小程序版本了，其它平台没试过，但是估计都能用。</p><p>和 <a href="https://uniapp.dcloud.io/component/live-player">live-player</a> 配合使用，播放视频挺流畅的。</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li>24小时刻度尺，30分钟分隔</li><li>有录像的时间段在刻度尺上标识（支持多个时间段）</li><li>回传刻度无录像时间段时间值、刻度有录像时间段时间值（用于接口获取播放视频）</li><li> 目前刻度尺返回值精确到秒</li><li>自动回滚最后有录像时间段</li></ul><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/de7e1ec489e8491b9bfee654a9ccfe3f~tplv-k3u1fbpfcp-watermark.image" alt="Snip20220107_10.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d68d773935734198b8d4a08397015dfe~tplv-k3u1fbpfcp-watermark.image" alt="Snip20220107_10.gif"></p><h2 id="有录像的时间段在刻度尺上标识（支持多个时间段）实现思路"><a href="#有录像的时间段在刻度尺上标识（支持多个时间段）实现思路" class="headerlink" title="有录像的时间段在刻度尺上标识（支持多个时间段）实现思路"></a>有录像的时间段在刻度尺上标识（支持多个时间段）实现思路</h2><p><em>（纯粹记录下，怕自己忘记了，肯定会忘记的）</em></p><p>传参是以时间段的方式，每段录像的开始时间、结束时间为一组。以开始时间、结束时间在刻度尺上的位置，渲染一段带颜色的<code>view</code>，就能实现多个时间段在刻度尺上的标识。</p><h3 id="代码实现思路"><a href="#代码实现思路" class="headerlink" title="代码实现思路"></a>代码实现思路</h3><p>处理渲染用的开始时间、结束时间数组，形成新的时间段，每个时间段由以下3个元素组成：</p><h4 id="1、开始时间位置距（0点）距离，这里代号a"><a href="#1、开始时间位置距（0点）距离，这里代号a" class="headerlink" title="1、开始时间位置距（0点）距离，这里代号a"></a>1、开始时间位置距（0点）距离，这里代号a</h4><p>以0点为原点，找到开始时间在刻度尺上的位置，算法在<code>utils.js</code>文件的<code>dateToGrid</code>方法里。难点主要是24小时刻度尺上<code>px</code>长度和真实时间之间的转换。</p><p><code>t1</code>算出开始时间的位置在刻度尺上占多少<code>px</code>格子，然后乘每个格子的宽度，就得到开始时间位置距原点距离<code>poi</code></p><figure class="highlight ceylon"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs ceylon"><span class="hljs-keyword">let</span> poi = t<span class="hljs-number">1</span> * <span class="hljs-keyword">this</span>.single<br></code></pre></td></tr></table></figure><h4 id="2、时间段在刻度尺上的长度，这里代号b"><a href="#2、时间段在刻度尺上的长度，这里代号b" class="headerlink" title="2、时间段在刻度尺上的长度，这里代号b"></a>2、时间段在刻度尺上的长度，这里代号b</h4><p><code>t2</code>算出结束时间的位置在刻度尺上占多少<code>px</code>格子，<code>t2</code>减<code>t1</code>就是时间段在刻度尺上的长度<code>len</code>了。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">let</span> len = (t2-t1).<span class="hljs-keyword">to</span><span class="hljs-constructor">Fixed(2)</span><span class="hljs-operator"> * </span>this.single<br></code></pre></td></tr></table></figure><h4 id="3、结束时间距（0点）的距离，这里代号c"><a href="#3、结束时间距（0点）的距离，这里代号c" class="headerlink" title="3、结束时间距（0点）的距离，这里代号c"></a>3、结束时间距（0点）的距离，这里代号c</h4><p>这个有2种算法：</p><ul><li>1、开始时间位置<code>poi</code>加时间段长度<code>len</code></li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">let</span> <span class="hljs-keyword">left</span> = poi + <span class="hljs-built_in">len</span><br></code></pre></td></tr></table></figure><ul><li>2、计算结束时间位置距开始时间（0点）距离</li></ul><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon"><span class="hljs-keyword">let</span> left = t<span class="hljs-number">2</span> * <span class="hljs-keyword">this</span>.single<br></code></pre></td></tr></table></figure><h3 id="页面渲染"><a href="#页面渲染" class="headerlink" title="页面渲染"></a>页面渲染</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs maxima">&lt;<span class="hljs-built_in">view</span> class=<span class="hljs-string">&quot;scale-active&quot;</span>&gt;<br>    &lt;<span class="hljs-built_in">view</span> class=&#x27;<span class="hljs-built_in">scale</span>-active-<span class="hljs-built_in">time</span>&#x27; v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;(it, idt) in newActiveTime&quot;</span> :<span class="hljs-built_in">key</span>=<span class="hljs-string">&quot;idt&quot;</span> :<span class="hljs-built_in">style</span>=<span class="hljs-string">&quot;&#123;marginLeft: idt&gt;0?newActiveTime[idt][0]-newActiveTime[idt-1][2] + &#x27;px&#x27;:newActiveTime[idt][0] + &#x27;px&#x27;&#125;&quot;</span>&gt;<br>        &lt;<span class="hljs-built_in">view</span> class=<span class="hljs-string">&quot;scale-active-item&quot;</span> :<span class="hljs-built_in">style</span>=<span class="hljs-string">&quot;&#123;width: it[1] + &#x27;px&#x27;&#125;&quot;</span> /&gt;<br>    &lt;/<span class="hljs-built_in">view</span>&gt;<br>&lt;/<span class="hljs-built_in">view</span>&gt;<br></code></pre></td></tr></table></figure><h4 id="scale-active-time"><a href="#scale-active-time" class="headerlink" title="scale-active-time"></a>scale-active-time</h4><p>主要是定位时间段开始渲染的位置。</p><ul><li>newActiveTime[idt][0] + ‘px’</li></ul><p>第一个时间段开始渲染的位置就是<code>a</code></p><ul><li>newActiveTime[idt][0]-newActiveTime[idt-1][2] + ‘px’</li></ul><p><code>&gt;0</code>的时间段，用下一个时间段的开始时间位置<code>a</code>减去上一个时间段结束时间位置<code>c</code>，就可以得到下一个时间段开始渲染的位置</p><h4 id="scale-active-item"><a href="#scale-active-item" class="headerlink" title="scale-active-item"></a>scale-active-item</h4><p>每个时间段<code>view</code>的宽度<code>width</code></p><p>以上，就是时间刻度尺上标识带录像时间段的思路了。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="页面引入"><a href="#页面引入" class="headerlink" title="页面引入"></a>页面引入</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">import videoTimeSlider <span class="hljs-keyword">from</span> &#x27;@/uni_modules/video-<span class="hljs-built_in">time</span>-slider/components/video-<span class="hljs-built_in">time</span>-slider/video-<span class="hljs-built_in">time</span>-slider.vue&#x27;<br></code></pre></td></tr></table></figure><h3 id="页面调用"><a href="#页面调用" class="headerlink" title="页面调用"></a>页面调用</h3><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scilab">&lt;video-time-slider :curDate=<span class="hljs-string">&quot;2021-11-29&quot;</span><br>    :activeTime=<span class="hljs-string">&quot;[[&#x27;</span><span class="hljs-number">01</span>:<span class="hljs-number">12</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">03</span>:<span class="hljs-number">43</span><span class="hljs-string">&#x27;],[&#x27;</span><span class="hljs-number">05</span>:<span class="hljs-number">22</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">07</span>:<span class="hljs-number">33</span><span class="hljs-string">&#x27;],[&#x27;</span><span class="hljs-number">12</span>:<span class="hljs-number">02</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">17</span>:<span class="hljs-number">39</span><span class="hljs-string">&#x27;]]&quot;</span> <br>    @value=<span class="hljs-string">&quot;curValue&quot;</span><br>    @active-value=<span class="hljs-string">&quot;activeValue&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">components</span>: &#123;<br>        videoTimeSlider<br>    &#125;,<br>    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">curVal</span>: <span class="hljs-string">&#x27;00:00&#x27;</span><br>        &#125;;<br>    &#125;,<br>    <span class="hljs-attr">methods</span>: &#123;<br>        <span class="hljs-title function_">curValue</span>(<span class="hljs-params">msg</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">curVal</span> = msg<br>        &#125;,<br>        <span class="hljs-title function_">activeValue</span>(<span class="hljs-params">msg</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">666</span>, msg)<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>具体看例子</p><h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><table><thead><tr><th align="center">参数名</th><th align="center">默认值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">curDate</td><td align="center">2021-11-24</td><td align="center">日期</td></tr><tr><td align="center">activeTime</td><td align="center">[]</td><td align="center">时间段，标识可播放录像</td></tr><tr><td align="center">styles</td><td align="center">{…}</td><td align="center">自定义卡尺样式</td></tr></tbody></table><p>style选项</p><table><thead><tr><th align="center">参数名</th><th align="center">默认值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">line</td><td align="center">#dbdbdb</td><td align="center">刻度颜色</td></tr><tr><td align="center">bginner</td><td align="center">#fbfbfb</td><td align="center">前景色颜色</td></tr><tr><td align="center">bgoutside</td><td align="center">#dbdbdb</td><td align="center">背景色颜色</td></tr><tr><td align="center">lineSelect</td><td align="center">#ea3639</td><td align="center">选中线颜色</td></tr><tr><td align="center">fontColo</td><td align="center">#404040</td><td align="center">刻度数字颜色</td></tr><tr><td align="center">fontSiz</td><td align="center">12</td><td align="center">字体大小</td></tr></tbody></table><h2 id="方法说明"><a href="#方法说明" class="headerlink" title="方法说明"></a>方法说明</h2><table><thead><tr><th align="center">事件名称</th><th align="center">说明</th><th align="center">返回参数</th></tr></thead><tbody><tr><td align="center">@value</td><td align="center">刻度无录像时间段时间值</td><td align="center">时间值字符串</td></tr><tr><td align="center">@active-value</td><td align="center">刻度有录像时间段时间值</td><td align="center">时间值字符串</td></tr></tbody></table><h2 id="版本要求"><a href="#版本要求" class="headerlink" title="版本要求"></a>版本要求</h2><ul><li>微信 App iOS 最低版本要求：6.5.21 。</li><li>微信 App Android 最低版本要求：6.5.19。</li><li>小程序基础库最低版本要求：1.7.0。</li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>如果微信开发者工具报以下错误</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">TypeError: Cannot <span class="hljs-keyword">read</span> <span class="hljs-keyword">property</span><span class="hljs-title"> </span>&#x27;forceUpdate&#x27; of undefined<br></code></pre></td></tr></table></figure><p><code>manifest.json</code>文件配置下微信小程序的AppID就行了，不用在意</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>已上插件市场 <a href="https://ext.dcloud.net.cn/plugin?id=7142">video-time-slider</a></p><p>市场上的代码可能会忘记更新，具体看代码了，github上的代码是最新的 <a href="https://github.com/liyoro/video-time-slider">video-time-slider</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>video</tag>
      
      <tag>视频播放</tag>
      
      <tag>video-time-slider</tag>
      
      <tag>uni-app</tag>
      
      <tag>vue</tag>
      
      <tag>小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EasyPlayer.js修改默认的请求方式实操过程</title>
    <link href="/2021/12/22/EasyPlayer.js%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%9A%84%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F%E5%AE%9E%E6%93%8D%E8%BF%87%E7%A8%8B/"/>
    <url>/2021/12/22/EasyPlayer.js%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%9A%84%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F%E5%AE%9E%E6%93%8D%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>EasyPlayer请求视频流地址时，默认是<code>HEAD</code>请求方式的，现在服务提供方的视频流地址需要<code>GET</code>或者<code>POST</code>方式才能访问，不然就<code>503 forbidden</code>错误，拒绝访问。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>看了下<code>EasyPlayer.js</code>的文档，发现没有修改请求方式的配置。</p><p>唯有试试修改源码，找到请求视频流地址的地方，把<code>HEAD</code>改成<code>GET</code>或者<code>POST</code></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://ask.csdn.net/questions/7577144">easyplayer.js能否修改默认的请求方式</a></p><p>这是搜索到的唯一解决方案，试着修改了下，请求方式确实可以变成<code>GET</code></p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>项目中使用的是<a href="https://github.com/tsingsee/EasyPlayer.js">EasyPlayer.js</a>截止至2021年12月20日的最新版本，和 <a href="##%E5%8F%82%E8%80%83">参考</a>中的 <code>EasyPlayer-element.min.js</code> 源码稍微有点不一样，但是具体修改的地方还是一样的。</p><p>在文件<code>EasyPlayer-element.min.js</code>搜索<code>.method.toUpperCase()</code>，目前全文只有一个地方有这个，就是要修改的地方了。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4c71455f2a894884bda7b5ad90190ae4~tplv-k3u1fbpfcp-watermark.image" alt="Snip20211220_7.png"></p><p>修改成<code>GET</code>，保存文件。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><h3 id="一、清缓存"><a href="#一、清缓存" class="headerlink" title="一、清缓存"></a>一、清缓存</h3><p>要保证服务器的<code>EasyPlayer-element.min.js</code> 文件没有在浏览器缓存了，不然怎么刷新都没效果的。小白的简单操作就是：关服务—刷新页面—重启服务—刷新页面</p><h3 id="二、可能会遇到有视频拉流，但是无视频画面的情况"><a href="#二、可能会遇到有视频拉流，但是无视频画面的情况" class="headerlink" title="二、可能会遇到有视频拉流，但是无视频画面的情况"></a>二、可能会遇到有视频拉流，但是无视频画面的情况</h3><p>看控制台报错，是因为<code>libDecoder.wasm</code>文件的服务器路径不对，这玩意是视频解码用的，没了，播不了视频。</p><p>这个问题，要么修改源码，要么按报错的路径把<code>libDecoder.wasm</code>文件放到服务器对应的目录就可以了。</p><p>如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f75cb10905d0493a90506c9a4e6be4c2~tplv-k3u1fbpfcp-watermark.image" alt="Snip20211220_8.png"></p><p>以上，是个临时的解决方案，希望后期官方可以开放一下请求方式的配置了。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>video</tag>
      
      <tag>EasyPlayer.js</tag>
      
      <tag>视频播放</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>create-vue初试，问题小结</title>
    <link href="/2021/10/25/create-vue%E5%88%9D%E8%AF%95%EF%BC%8C%E9%97%AE%E9%A2%98%E5%B0%8F%E7%BB%93/"/>
    <url>/2021/10/25/create-vue%E5%88%9D%E8%AF%95%EF%BC%8C%E9%97%AE%E9%A2%98%E5%B0%8F%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="create-vue初试，问题小结"><a href="#create-vue初试，问题小结" class="headerlink" title="create-vue初试，问题小结"></a>create-vue初试，问题小结</h1><p><a href="https://github.com/vuejs/create-vue">create-vue</a>，一个基于<code>vite</code>的全新的<code>vue</code>脚手架工具，始于2021年10月7日，还很嫩，传说未来会替掉<code>Vue-CLI</code>。</p><p>看文档，用法很简单，就一句命令</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> init vue@next<br></code></pre></td></tr></table></figure><p>但真正用起来，就有几个小问题要注意了。</p><h2 id="1、npm版本问题"><a href="#1、npm版本问题" class="headerlink" title="1、npm版本问题"></a>1、npm版本问题</h2><p>命令运行后，选好配置，运行<code>npm install</code>，会发现一堆 <font color="#dd001b">npm WARN</font> 信息，其中</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> WARN notsup Unsupported engine for vscode-json-languageservice@<span class="hljs-number">4</span>.<span class="hljs-number">1</span>.<span class="hljs-number">8</span>: wanted: &#123;<span class="hljs-string">&quot;npm&quot;</span>:<span class="hljs-string">&quot;&gt;=7.0.0&quot;</span>&#125; (current: &#123;<span class="hljs-string">&quot;node&quot;</span>:<span class="hljs-string">&quot;14.0.0&quot;</span>,<span class="hljs-string">&quot;npm&quot;</span>:<span class="hljs-string">&quot;6.14.4&quot;</span>&#125;)<br></code></pre></td></tr></table></figure><p>有些库要求<code>&quot;npm&quot;:&quot;&gt;=7.0.0&quot;</code>，虽然<code>create-vue</code>的<code>package.json</code>里面，建议的node版本是</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;engines&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;node&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^12.13.0 || ^14.0.0 || &gt;= 16.0.0&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>但是，还是切换成<code>16.0.0</code>的版本比较好。</p><p>我用的是<code>nvm</code>，执行如下命令</p><p>没安装的先安装</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nvm</span> install v16.<span class="hljs-number">0</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nvm</span> use v16.<span class="hljs-number">0</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Now</span> using node v16.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> (npm v7.<span class="hljs-number">10</span>.<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>这样<code>npm install</code>的时候就不会有警告信息了。</p><h2 id="2、别名报错问题"><a href="#2、别名报错问题" class="headerlink" title="2、别名报错问题"></a>2、别名报错问题</h2><p>运行<code>npm run dev</code>，报错（截一段，太多了）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; node_modules/vite/dist/node/chunks/dep-be032392.js:42584:38: error: [plugin: vite:dep-scan] ENOENT: no such file or directory, open <span class="hljs-string">&#x27;/Users/liyoro/Documents/web%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/vue3-project/src/components/HelloWorld.vue&#x27;</span><br>    42584 │                 <span class="hljs-built_in">let</span> raw = fs__default.readFileSync(path, <span class="hljs-string">&#x27;utf-8&#x27;</span>);<br>          ╵                                       ^<br>    at Object.openSync (node:fs:506:3)<br>    at Object.readFileSync (node:fs:402:35)<br>    at /Users/liyoro/Documents/vue3-project/node_modules/vite/dist/node/chunks/dep-be032392.js:42584:39<br>    at callback (/Users/liyoro/Documents/vue3-project/node_modules/esbuild/lib/main.js:889:34)<br>    at handleRequest (/Users/liyoro/Documents/vue3-project/node_modules/esbuild/lib/main.js:672:36)<br>    at handleIncomingPacket (/Users/liyoro/Documents/vue3-project/node_modules/esbuild/lib/main.js:719:7)<br>    at Socket.readFromStdout (/Users/liyoro/Documents/vue3-project/node_modules/esbuild/lib/main.js:596:7)<br>    at Socket.emit (node:events:365:28)<br>    at addChunk (node:internal/streams/readable:314:12)<br>    at readableAddChunk (node:internal/streams/readable:289:9)<br><br>   node_modules/vite/dist/node/chunks/dep-be032392.js:42583:18: note: This error came from the <span class="hljs-string">&quot;onLoad&quot;</span> callback registered here<br>    42583 │             build.onLoad(&#123; filter: htmlTypesRE, namespace: <span class="hljs-string">&#x27;html&#x27;</span>...<br>          ╵                   ~~~~~~<br>    at setup (/Users/liyoro/Documents/vue3-project/node_modules/vite/dist/node/chunks/dep-be032392.js:42583:19)<br>    at handlePlugins (/Users/liyoro/Documents/vue3-project/node_modules/esbuild/lib/main.js:756:23)<br>    at Object.buildOrServe (/Users/liyoro/Documents/vue3-project/node_modules/esbuild/lib/main.js:1044:7)<br>    at /Users/liyoro/Documents/vue3-project/node_modules/esbuild/lib/main.js:1895:17<br>    at new Promise (&lt;anonymous&gt;)<br>    at Object.build (/Users/liyoro/Documents/vue3-project/node_modules/esbuild/lib/main.js:1894:14)<br>    at Object.build (/Users/liyoro/Documents/vue3-project/node_modules/esbuild/lib/main.js:1749:51)<br>    at /Users/liyoro/Documents/vue3-project/node_modules/vite/dist/node/chunks/dep-be032392.js:42506:54<br>    at Array.map (&lt;anonymous&gt;)<br><br>   html:/Users/liyoro/Documents/vue3-project/src/App.vue:5:7: note: The plugin <span class="hljs-string">&quot;vite:dep-scan&quot;</span> was triggered by this import<br>        5 │ import <span class="hljs-string">&#x27;@/components/HelloWorld.vue&#x27;</span><br></code></pre></td></tr></table></figure><p>看着就是一组件路径错误的问题，搜了下，还有人遇到图片路径错误的问题的。这时候要看看项目的别名配置。</p><p><code>create-vue</code>初始化好的默认项目里面，<code>vite.config.ts</code>文件，默认配置如下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">export default <span class="hljs-built_in">defineConfig</span>(&#123;<br>  plugins: <span class="hljs-selector-attr">[vue()]</span>,<br>  resolve: &#123;<br>    alias: &#123;<br>      <span class="hljs-string">&#x27;@/&#x27;</span>: new <span class="hljs-built_in">URL</span>(<span class="hljs-string">&#x27;./src/&#x27;</span>, import<span class="hljs-selector-class">.meta</span>.url)<span class="hljs-selector-class">.pathname</span><br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>修改下</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sas">const path = require(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br>function _<span class="hljs-meta">resolve</span>(dir: string) &#123;<br>  <span class="hljs-keyword">return</span> path.<span class="hljs-meta">resolve</span>(__dirname, dir);<br>&#125;<br><br>export default defineConfig(&#123;<br>  resolve: &#123;<br>    alias: &#123;<br>      <span class="hljs-string">&#x27;@&#x27;</span>: _<span class="hljs-meta">resolve</span>(<span class="hljs-string">&#x27;src&#x27;</span>),<br>      <span class="hljs-string">&#x27;@assets&#x27;</span>: _<span class="hljs-meta">resolve</span>(<span class="hljs-string">&#x27;src/assets&#x27;</span>),<br>      <span class="hljs-string">&#x27;@comps&#x27;</span>: _<span class="hljs-meta">resolve</span>(<span class="hljs-string">&#x27;src/components&#x27;</span>),<br>      <span class="hljs-string">&#x27;@utils&#x27;</span>: _<span class="hljs-meta">resolve</span>(<span class="hljs-string">&#x27;src/utils&#x27;</span>),<br>      <span class="hljs-string">&#x27;@router&#x27;</span>: _<span class="hljs-meta">resolve</span>(<span class="hljs-string">&#x27;src/router&#x27;</span>),<br>      <span class="hljs-string">&#x27;@store&#x27;</span>: _<span class="hljs-meta">resolve</span>(<span class="hljs-string">&#x27;src/store&#x27;</span>),<br>    &#125;<br>  &#125;,<br>  plugins: [vue()]<br>&#125;)<br></code></pre></td></tr></table></figure><p>运行<code>npm run dev</code>，成功。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>create-vue</code>感觉还不是太完善，但是建项目确实快，看以后的迭代吧。</p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我做过的还比较满意的项目</title>
    <link href="/2021/08/01/%E6%88%91%E5%81%9A%E8%BF%87%E7%9A%84%E8%BF%98%E6%AF%94%E8%BE%83%E6%BB%A1%E6%84%8F%E7%9A%84%E9%A1%B9%E7%9B%AE/"/>
    <url>/2021/08/01/%E6%88%91%E5%81%9A%E8%BF%87%E7%9A%84%E8%BF%98%E6%AF%94%E8%BE%83%E6%BB%A1%E6%84%8F%E7%9A%84%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<!--2020-12-07--><h2 id="江西星火有机硅5G智慧工厂应用"><a href="#江西星火有机硅5G智慧工厂应用" class="headerlink" title="江西星火有机硅5G智慧工厂应用"></a>江西星火有机硅5G智慧工厂应用</h2><p>江西星火有机硅化工厂数据大屏展示平台</p><p>东西做的挺炫的，没想到新闻上的截图这么难看！而且只截了首页，还不是生产上的 </p><p>新闻：<a href="https://www.sohu.com/a/436718975_743754">“5G+智能化工应用平台”在江西蓝星星火有机硅有限公司正式上线</a></p><p>成绩：<font color="#DB4337">2020年度工信部“绽放杯”总决赛二等奖、工业互联网专题一等奖</font></p><h2 id="广东慧眼—演示平台"><a href="#广东慧眼—演示平台" class="headerlink" title="广东慧眼—演示平台"></a>广东慧眼—演示平台</h2><ul><li>1、电信慧眼产品推广使用</li><li>2、电信广东省21个地市宣传使用</li><li>3、电信2021年世界安防博览会演示用</li></ul>]]></content>
    
    
    <categories>
      
      <category>做过的项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>做过的项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>You are using the runtime-only build of Vue where the template compiler is not available</title>
    <link href="/2020/08/05/Vue%E6%8A%A5%E9%94%99%EF%BC%9AYou%20are%20using%20the%20runtime-only%20build%20of%20Vue%20where%20the%20template%20compiler%20is%20not%20available/"/>
    <url>/2020/08/05/Vue%E6%8A%A5%E9%94%99%EF%BC%9AYou%20are%20using%20the%20runtime-only%20build%20of%20Vue%20where%20the%20template%20compiler%20is%20not%20available/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue报错：You-are-using-the-runtime-only-build-of-Vue-where-the-template-compiler-is-not-available"><a href="#Vue报错：You-are-using-the-runtime-only-build-of-Vue-where-the-template-compiler-is-not-available" class="headerlink" title="Vue报错：You are using the runtime-only build of Vue where the template compiler is not available"></a>Vue报错：You are using the runtime-only build of Vue where the template compiler is not available</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><figure class="highlight perl"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs perl"><span class="hljs-string">&quot;vue&quot;</span>: <span class="hljs-string">&quot;^2.6.10&quot;</span><br><span class="hljs-string">&quot;@vue/cli-service&quot;</span>: <span class="hljs-string">&quot;^3.11.0&quot;</span><br></code></pre></td></tr></table></figure><h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>高德地图自定义打点，marker的click弹窗，弹窗里有交互，有调用到methods里面的vue方法，需要动态渲染，用到了<font color=#4d7ac0>Vue.extend</font>，代码报错在此处。</p><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p>vue.runtime.esm.js?2b0e:619 [Vue warn]: You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.</p><p><img src="/img/Snip20210522_96.png"></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>vue有两种形式的代码，平时用的组件模板都是事先定义好的compiler（模板）模式，还有一种是动态渲染组件用的runtime模式（运行时）。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>在vue.config.js 中添加如下配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> = &#123;<br>runtimeCompiler: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>错误</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我使用的Mac软件及工具</title>
    <link href="/2020/07/06/%E6%88%91%E4%BD%BF%E7%94%A8%E7%9A%84Mac%E8%BD%AF%E4%BB%B6%E5%8F%8A%E5%B7%A5%E5%85%B7/"/>
    <url>/2020/07/06/%E6%88%91%E4%BD%BF%E7%94%A8%E7%9A%84Mac%E8%BD%AF%E4%BB%B6%E5%8F%8A%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="我使用的Mac软件及工具"><a href="#我使用的Mac软件及工具" class="headerlink" title="我使用的Mac软件及工具"></a>我使用的Mac软件及工具</h1><ul><li><p><a href="#%E8%BD%AF%E4%BB%B6">软件</a></p><ul><li><a href="#%E5%BC%80%E5%8F%91">开发</a></li><li><a href="#%E8%A7%86%E9%A2%91">视频</a></li><li><a href="#%E9%9F%B3%E4%B9%90">音乐</a></li><li><a href="#%E7%A4%BE%E4%BA%A4">社交</a></li><li><a href="#%E5%9B%BE%E7%89%87">图片</a></li></ul></li><li><p><a href="#Command-Line-%E8%BD%AF%E4%BB%B6">Command Line 软件</a></p></li><li><p><a href="#%E5%B7%A5%E5%85%B7">工具</a></p><ul><li><a href="#%E6%B5%8F%E8%A7%88%E5%99%A8">浏览器</a></li><li><a href="#%E6%95%88%E7%8E%87">效率</a></li><li><a href="#%E6%96%87%E6%A1%A3">文档</a></li></ul></li></ul><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><h4 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a><a href="https://developer.apple.com/cn/xcode/">Xcode</a></h4><h4 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a><a href="https://code.visualstudio.com/Download/">VSCode</a></h4><h4 id="HBuilderX"><a href="#HBuilderX" class="headerlink" title="HBuilderX"></a><a href="https://www.dcloud.io/hbuilderx.html">HBuilderX</a></h4><h4 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a><a href="https://www.sublimetext.com/">Sublime Text</a></h4><h4 id="Cornerstone-svn"><a href="#Cornerstone-svn" class="headerlink" title="Cornerstone - svn"></a><a href="https://cornerstone.assembla.com/">Cornerstone</a> - svn</h4><h4 id="Github-Desktop-git"><a href="#Github-Desktop-git" class="headerlink" title="Github Desktop - git"></a><a href="https://desktop.github.com/">Github Desktop</a> - git</h4><h4 id="FileZilla-ftp"><a href="#FileZilla-ftp" class="headerlink" title="FileZilla - ftp"></a><a href="https://filezilla-project.org/download.php?platform=osx">FileZilla</a> - ftp</h4><h4 id="Charles-抓包"><a href="#Charles-抓包" class="headerlink" title="Charles - 抓包"></a><a href="https://www.charlesproxy.com/">Charles</a> - 抓包</h4><h4 id="微信开发者工具"><a href="#微信开发者工具" class="headerlink" title="微信开发者工具"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">微信开发者工具</a></h4><h4 id="ColorSnapper2-屏幕取色"><a href="#ColorSnapper2-屏幕取色" class="headerlink" title="ColorSnapper2 - 屏幕取色"></a><a href="https://colorsnapper.com/">ColorSnapper2</a> - 屏幕取色</h4><h4 id="ImageOptim-图片压缩"><a href="#ImageOptim-图片压缩" class="headerlink" title="ImageOptim - 图片压缩"></a><a href="https://imageoptim.com/mac">ImageOptim</a> - 图片压缩</h4><h4 id="iTerm"><a href="#iTerm" class="headerlink" title="iTerm"></a><a href="https://www.iterm2.com/">iTerm</a></h4><h4 id="Postman"><a href="#Postman" class="headerlink" title="Postman"></a><a href="https://www.postman.com/downloads/">Postman</a></h4><h4 id=""><a href="#" class="headerlink" title=""></a><a href=""></a></h4><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><h4 id="VLC"><a href="#VLC" class="headerlink" title="VLC"></a><a href="https://www.videolan.org/vlc/download-macosx.html">VLC</a></h4><h4 id="IINA"><a href="#IINA" class="headerlink" title="IINA"></a><a href="https://github.com/lhc70000/iina">IINA</a></h4><h3 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h3><h4 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a><a href="https://music.163.com/">网易云音乐</a></h4><h4 id="QQ音乐"><a href="#QQ音乐" class="headerlink" title="QQ音乐"></a><a href="https://y.qq.com/">QQ音乐</a></h4><h3 id="社交"><a href="#社交" class="headerlink" title="社交"></a>社交</h3><h4 id="微信"><a href="#微信" class="headerlink" title="微信"></a><a href="https://weixin.qq.com/">微信</a></h4><h4 id="QQ"><a href="#QQ" class="headerlink" title="QQ"></a><a href="https://im.qq.com/index">QQ</a></h4><h4 id="微博"><a href="#微博" class="headerlink" title="微博"></a><a href="http://weiboformac.sinaapp.com/">微博</a></h4><h4 id="钉钉"><a href="#钉钉" class="headerlink" title="钉钉"></a><a href="https://www.dingtalk.com/">钉钉</a></h4><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><h4 id="Pixelmator"><a href="#Pixelmator" class="headerlink" title="Pixelmator"></a><a href="https://www.pixelmator.com/pro/">Pixelmator</a></h4><h2 id="Command-Line-软件"><a href="#Command-Line-软件" class="headerlink" title="Command Line 软件"></a>Command Line 软件</h2><ul><li><a href="https://brew.sh/">brew</a></li><li><a href="https://curl.haxx.se/docs/manpage.html">curl</a></li><li><a href="https://github.com/nvm-sh/nvm/blob/master/README.md">nvm</a></li><li><a href="https://github.com/yarnpkg/yarn">yarn</a></li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><h4 id="Chrome浏览器"><a href="#Chrome浏览器" class="headerlink" title="Chrome浏览器"></a><a href="https://www.google.cn/chrome/index.html">Chrome浏览器</a></h4><blockquote><p>常用插件</p></blockquote><ul><li>Adblock Plus - 免费的广告拦截器</li><li>Axure RP Extension for Chrome</li><li>Evernote Web Clipper</li><li>Lighthouse</li><li>PageSpeed</li><li>Screenity - 屏幕录像和标注工具</li><li>WhatRuns</li><li>FeHelper - 前端助手</li><li>二维码(QR码)生成器(QR Code Generator)</li><li>FireShot - 捕捉网页截图</li><li>股票基金助手 - 盯盘助手</li><li>自选基金助手 - 实时查看基金涨跌幅</li><li>bilibili哔哩哔哩下载助手</li></ul><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><h4 id="Go2Shell"><a href="#Go2Shell" class="headerlink" title="Go2Shell"></a><a href="https://zipzapmac.com/Go2Shell">Go2Shell</a></h4><h4 id="SwitchHosts"><a href="#SwitchHosts" class="headerlink" title="SwitchHosts"></a><a href="https://swh.app/zh/">SwitchHosts</a></h4><h4 id="Hidden-Bar"><a href="#Hidden-Bar" class="headerlink" title="Hidden Bar"></a><a href="https://apps.apple.com/cn/app/hidden-bar/id1452453066?mt=12">Hidden Bar</a></h4><h4 id="Snip-截图"><a href="#Snip-截图" class="headerlink" title="Snip - 截图"></a><a href="https://snip.qq.com/">Snip</a> - 截图</h4><h4 id="dev-sidecar开发者边车-各种加速"><a href="#dev-sidecar开发者边车-各种加速" class="headerlink" title="dev-sidecar开发者边车 - 各种加速"></a><a href="https://github.com/docmirror/dev-sidecar">dev-sidecar开发者边车</a> - 各种加速</h4><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><h4 id="Evernote"><a href="#Evernote" class="headerlink" title="Evernote"></a><a href="https://www.yinxiang.com/?referer=en">Evernote</a></h4><h4 id="有道云笔记"><a href="#有道云笔记" class="headerlink" title="有道云笔记"></a><a href="https://note.youdao.com/">有道云笔记</a></h4><h4 id="MacDown"><a href="#MacDown" class="headerlink" title="MacDown"></a><a href="https://macdown.uranusjr.com/">MacDown</a></h4>]]></content>
    
    
    <categories>
      
      <category>Mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
      <tag>软件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>跨平台酷炫动画实现方案推荐（iOS,Android,Web）</title>
    <link href="/2020/07/01/%E8%B7%A8%E5%B9%B3%E5%8F%B0%E9%85%B7%E7%82%AB%E5%8A%A8%E7%94%BB%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88%E6%8E%A8%E8%8D%90%EF%BC%88iOS,Android,Web%EF%BC%89/"/>
    <url>/2020/07/01/%E8%B7%A8%E5%B9%B3%E5%8F%B0%E9%85%B7%E7%82%AB%E5%8A%A8%E7%94%BB%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88%E6%8E%A8%E8%8D%90%EF%BC%88iOS,Android,Web%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>没啥，都是用的别人的轮子。记录下，方便查找使用。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>需要用到这个，是因为当初在做<code>中国电信视频客服 iOS SDK</code>的时候，有些情境要实现比较复杂的动画，例如：送礼物、点赞……。而且，<code>iOS</code>端和<code>Android</code>端的效果要统一。一开始找的<code>SVGA</code>，还挺方便的，集成很简单。</p><p>后来发现，同类型的还有，这里记录下。</p><h2 id="SVGA"><a href="#SVGA" class="headerlink" title="SVGA"></a>SVGA</h2><p><a href="http://svga.io/">SVGA</a> 是YY（欢聚时代）开源的产品</p><p>SVGA 是一种跨平台的开源动画格式，同时兼容 iOS / Android / Web。SVGA 除了使用简单，性能卓越，同时让动画开发分工明确，各自专注各自的领域，大大减少动画交互的沟通成本，提升开发效率。动画设计师专注动画设计，通过工具输出 svga 动画文件，提供给开发工程师在集成 SVGAPlayer 之后直接使用。</p><p>具体和集成看官网 <a href="http://svga.io/">SVGA</a></p><p>目前中国电信手机客户端上的视频客服功能，有用到此方案，欢迎给客服点赞送花。</p><h2 id="VAP"><a href="#VAP" class="headerlink" title="VAP"></a>VAP</h2><p><a href="https://github.com/Tencent/vap">VAP(Video Animation Player)</a> 是企鹅电竞开源的产品</p><p>VAP是用于播放酷炫动画的实现方案。</p><ul><li>相比Webp, Apng动图方案，具有高压缩率(素材更小)、硬件解码(解码更快)的优点</li><li>相比Lottie，能实现更复杂的动画效果(比如粒子特效)</li></ul><p>具体和集成看官网 <a href="https://github.com/Tencent/vap">VAP(Video Animation Player)</a> </p><h2 id="Lottie（矢量动画方案）"><a href="#Lottie（矢量动画方案）" class="headerlink" title="Lottie（矢量动画方案）"></a>Lottie（矢量动画方案）</h2><p><a href="http://airbnb.io/lottie/#/">Lottie</a> 是Airbnb开源的产品。</p><p>设计师可以使用 <code>Adobe After Effects</code> 设计出漂亮的动画之后，使用 <code>Lottic</code> 提供的 <code>Bodymovin</code> 插件将设计好的动画导出成 <code>JSON</code> 格式，就可以直接运用在 <code>iOS</code>、<code>Android</code>、<code>Web</code>、<code>React Native</code>和<code>Windows</code>之上，无需其他额外操作。</p><p>具体和集成看官网 <a href="http://airbnb.io/lottie/#/">Lottie</a> </p><h2 id="GIF-Apng-Webp（动图方案）"><a href="#GIF-Apng-Webp（动图方案）" class="headerlink" title="GIF, Apng, Webp（动图方案）"></a>GIF, Apng, Webp（动图方案）</h2><p>这种方案在跨平台多端统一的效果不大好，这里只是提一下。</p><ul><li>GIF: 只支持8位颜色，颜色丢失严重，解码性能低，无法满足特效效果</li><li>Apng, Webp: 能够满足特效效果，但文件大，软解效率低（低端的手机上，比如当年的红米1，解码过程甚至能导致整个直播间卡顿）</li></ul><h2 id="mp4（视频方案）"><a href="#mp4（视频方案）" class="headerlink" title="mp4（视频方案）"></a>mp4（视频方案）</h2><p>这种方案在跨平台多端统一的效果不大好，这里只是提一下。</p><p>采用H264编码，相比动图方案，有很高的压缩率，硬件解码效率很高，缺点很明显，无法支持透明背景</p>]]></content>
    
    
    <categories>
      
      <category>动画</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>动画</tag>
      
      <tag>SVGA</tag>
      
      <tag>VAP</tag>
      
      <tag>Lottie</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue高德地图Loca 2.0飞线功能初体验</title>
    <link href="/2020/06/30/Vue%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BELoca%202.0%E9%A3%9E%E7%BA%BF%E5%8A%9F%E8%83%BD%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <url>/2020/06/30/Vue%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BELoca%202.0%E9%A3%9E%E7%BA%BF%E5%8A%9F%E8%83%BD%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<p>高德地图原来是没有飞线功能的，很多可视化效果和百度相比确实差很多。</p><p>在 <a href="https://lbs.amap.com/api/loca-v2/api">Loca 2.0 API</a> 里看到了一个<code>PulseLinkLayer</code>的图层</p><blockquote><p>连接飞线图层，可以支持弧度，宽度，过渡色等能力。 并且还支持脉冲动画，可以表达数据的朝向。</p></blockquote><p>按文档使用了下，发现没效果。发工单问了下，回答说文档有，但是功能是没有的，一周后会实现并上线使用例子？？？？？？？</p><p>官方例子：<a href="https://lbs.amap.com/demo/loca-v2/demos/cat-pulselink/pulslink_bj">北京人口流出弧线</a></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>具体是在 [高德开放平台GeoHUB初用（Vue使用高德地图Loca 2.0）](<a href="https://liyoro.com/2020/06/24/%E9%AB%98%E5%BE%B7%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0GeoHUB%E5%88%9D%E7%94%A8%EF%BC%88Vue%E4%BD%BF%E7%94%A8%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BELoca">https://liyoro.com/2020/06/24/高德开放平台GeoHUB初用（Vue使用高德地图Loca</a> 2.0）/) 的基础上，用<code>GeoHUB</code>绘制线，然后导出一份 <code>huadu_line.geojson</code>的文件。</p><p>主要代码如下，具体看 <code>代码</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">initPulseLink</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> linkLayer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Loca</span>.<span class="hljs-title class_">PulseLinkLayer</span>(&#123;<br>    <span class="hljs-attr">loca</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">loca</span>,<br>    <span class="hljs-attr">zooms</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">22</span>],<br>    <span class="hljs-attr">zIndex</span>: <span class="hljs-number">115</span>,<br>    <span class="hljs-attr">visible</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">opacity</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">depth</span>: <span class="hljs-literal">true</span><br>  &#125;)<br><br>  linkLayer.<span class="hljs-title function_">setSource</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">pLineSource</span>)<br>  linkLayer.<span class="hljs-title function_">setStyle</span>(&#123;<br>    <span class="hljs-attr">unit</span>: <span class="hljs-string">&#x27;meter&#x27;</span>,<br>    <span class="hljs-attr">dash</span>: [<span class="hljs-number">300</span>, <span class="hljs-number">0</span>, <span class="hljs-number">300</span>, <span class="hljs-number">0</span>],<br>    <span class="hljs-attr">lineWidth</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> [<span class="hljs-number">20</span>, <span class="hljs-number">20</span>]<br>    &#125;,<br>    <span class="hljs-attr">height</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">index, feat</span>) &#123;<br>      <span class="hljs-keyword">return</span> feat.<span class="hljs-property">distance</span> / <span class="hljs-number">3</span> + <span class="hljs-number">10</span><br>    &#125;,<br>    <span class="hljs-attr">smoothSteps</span>: <span class="hljs-number">200</span>,<br>    <span class="hljs-attr">speed</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">index, prop</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">50</span> * index + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">200</span><br>    &#125;,<br>    <span class="hljs-attr">flowLength</span>: <span class="hljs-number">500</span>,<br>    <span class="hljs-attr">lineColors</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">index, feat</span>) &#123;<br>      <span class="hljs-keyword">return</span> [<span class="hljs-string">&#x27;rgba(104, 68, 254, 0.0)&#x27;</span>, <span class="hljs-string">&#x27;rgba(104, 68, 254, 1.0)&#x27;</span>, <span class="hljs-string">&#x27;#0089FF&#x27;</span>]<br>    &#125;,<br>    <span class="hljs-attr">maxHeightScale</span>: <span class="hljs-number">0.5</span>, <span class="hljs-comment">// 弧顶位置比例</span><br>    <span class="hljs-attr">headColor</span>: <span class="hljs-string">&#x27;rgba(255, 255, 204, 1)&#x27;</span>, <span class="hljs-comment">//</span><br>    <span class="hljs-attr">trailColor</span>: <span class="hljs-string">&#x27;rgba(255, 255, 255, 1.0)&#x27;</span><br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="/img/Snip20210914_4.gif"></p><h2 id="代码总览"><a href="#代码总览" class="headerlink" title="代码总览"></a>代码总览</h2><p>涉及的文件如下（具体参考<strong>代码</strong>）：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">|-- public</span><br>    <span class="hljs-string">|-- data</span><br>        <span class="hljs-string">|-- huadu.geojson</span><br>        <span class="hljs-string">|-- huadu_line.geojson</span><br><span class="hljs-string">|-- src</span><br>    <span class="hljs-string">|-- components</span><br>        <span class="hljs-string">|-- map</span><br>            <span class="hljs-string">|-- locaPoint.vue</span><br>    <span class="hljs-string">|-- views</span><br>        <span class="hljs-string">|-- amapLocaTest    // 实例所在</span><br>            <span class="hljs-string">|-- index.vue</span><br>            <span class="hljs-string">|-- index.scss</span><br>            <span class="hljs-string">|-- index.js</span><br></code></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>按<code>代码总览</code>的目录去<a href="https://github.com/liyoro/vue-skill">代码</a>里找着看就行了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>高德的飞线，不能给线、脉冲加阴影，缺少比较炫的特效，功能比较少，真的如文档所说，用来<strong>表达数据的朝向</strong></p>]]></content>
    
    
    <categories>
      
      <category>高德地图</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
      <tag>高德地图</tag>
      
      <tag>GeoHUB</tag>
      
      <tag>Loca 2.0</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高德开放平台GeoHUB初用（Vue使用高德地图Loca 2.0）</title>
    <link href="/2020/06/24/%E9%AB%98%E5%BE%B7%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0GeoHUB%E5%88%9D%E7%94%A8%EF%BC%88Vue%E4%BD%BF%E7%94%A8%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BELoca%202.0%EF%BC%89/"/>
    <url>/2020/06/24/%E9%AB%98%E5%BE%B7%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0GeoHUB%E5%88%9D%E7%94%A8%EF%BC%88Vue%E4%BD%BF%E7%94%A8%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BELoca%202.0%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><a href="https://geohub.amap.com/">高德开放平台GeoHUB</a>，高德不声不息出的这玩意挺吊的。</p><p>以往地图打点、连线、做特定地市的区域地图，都不知道哪里找<code>GeoJSON</code>数据的，现在有这东西就超级方便了。结合高德地图的api，挺好用的了。这里通过<code>Loca.ScatterLayer</code>的来展示下<code>GeoHUB</code>的简单使用。</p><p><img src="/img/Snip20210901_74.png"></p><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><ul><li>1、此文涉及<a href="https://liyoro.com/2020/06/20/Vue%E5%AF%B9%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE2.0%E7%9A%84%E5%B0%81%E8%A3%85%E4%BD%BF%E7%94%A8/">Vue对高德地图2.0的封装使用</a>，这里用 <a href="https://lbs.amap.com/api/loca-v2/demo-overview">高德地图Loca 2.0</a> 的呼吸点（也叫散射点、贴地点、水波点）的制作过程来演示</li><li>2、<code>GeoHUB</code>生成的<code>geojosn</code>数据文件使用涉及 <a href="https://liyoro.com/2020/05/26/vue%E6%9C%AC%E5%9C%B0%E6%A8%A1%E6%8B%9F%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%B7%E6%B1%82mock%E6%95%B0%E6%8D%AE/">vue本地模拟服务器请求mock数据</a></li><li>3、<code>viewMode: &#39;3D&#39;</code> ，地图初始化的时候要设置成 3D 模式，否则图层会失去高度信息</li><li>4、<a href="https://lbs.amap.com/api/loca-v2/api">Loca 2.0 API</a></li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="components-–-map-–-locaPoint-vue"><a href="#components-–-map-–-locaPoint-vue" class="headerlink" title="components – map – locaPoint.vue"></a>components – map – locaPoint.vue</h3><p>呼吸点的加载代码主要如下，制作geo地图数据具体过程参考下节<code>GeoHUB制作地图geo数据</code>相关介绍</p><figure class="highlight stylus"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">initBreathPoint</span><span class="hljs-params">()</span></span> &#123;<br>  this<span class="hljs-selector-class">.breathPoint</span> = new Loca<span class="hljs-selector-class">.ScatterLayer</span>(&#123;<br>    loca: this<span class="hljs-selector-class">.loca</span>,<br>    zIndex: <span class="hljs-number">113</span>,<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>,<br>    visible: true,<br>    zooms: <span class="hljs-selector-attr">[2, 22]</span><br>  &#125;)<br>  <span class="hljs-comment">// 这里加载geo地图数据</span><br>  this<span class="hljs-selector-class">.breathPoint</span><span class="hljs-selector-class">.setSource</span>(this.geoLevelF)<br>  this<span class="hljs-selector-class">.breathPoint</span><span class="hljs-selector-class">.setStyle</span>(&#123;<br>    unit: <span class="hljs-string">&#x27;meter&#x27;</span>,<br>    size: <span class="hljs-selector-attr">[520, 520]</span>,<br>    borderWidth: <span class="hljs-number">520</span>,<br>    borderColor: <span class="hljs-string">&#x27;rgba(250,250,250,1)&#x27;</span>,<br>    duration: <span class="hljs-number">500</span>,<br>    animate: true,<br>    texture: <span class="hljs-string">&#x27;https://a.amap.com/Loca/static/loca-v2/demos/images/breath_yellow.png&#x27;</span>,<br>    <span class="hljs-attribute">color</span>: <span class="hljs-string">&#x27;rgba(200,200,200,1)&#x27;</span><br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="GeoHUB-制作地图geo数据"><a href="#GeoHUB-制作地图geo数据" class="headerlink" title="GeoHUB 制作地图geo数据"></a><a href="https://geohub.amap.com/">GeoHUB</a> 制作地图geo数据</h3><ul><li>1、选择绘制点功能，然后就可以在地图上标点。具体位置可以在搜索栏搜索定位。这里随便选了几个地点。</li></ul><p><img src="/img/Snip20210901_75.png"></p><ul><li>2、如果对数据有定制要求，可以添加自定义的属性字段。例如类型、颜色、分组……</li></ul><p><img src="/img/Snip20210901_76.png"></p><ul><li>3、点击保存后，返回数据集列表。点击下载，得到一个<code>huadu.geojson</code>的文件。</li></ul><p><img src="/img/Snip20210901_77.png"></p><ul><li>4、<code>huadu.geojson</code>文件内容如下，标准的<code>geo</code>地图数据格式</li></ul><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>  <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;FeatureCollection&quot;</span>,<br>  <span class="hljs-string">&quot;features&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;Feature&quot;</span>,<br>      <span class="hljs-string">&quot;properties&quot;</span>: &#123;&#125;,<br>      <span class="hljs-string">&quot;geometry&quot;</span>: &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;Point&quot;</span>, <span class="hljs-string">&quot;coordinates&quot;</span>: [<span class="hljs-number">113.220125</span>, <span class="hljs-number">23.404326</span>] &#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;Feature&quot;</span>,<br>      <span class="hljs-string">&quot;properties&quot;</span>: &#123;&#125;,<br>      <span class="hljs-string">&quot;geometry&quot;</span>: &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;Point&quot;</span>, <span class="hljs-string">&quot;coordinates&quot;</span>: [<span class="hljs-number">113.203846</span>, <span class="hljs-number">23.377273</span>] &#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;Feature&quot;</span>,<br>      <span class="hljs-string">&quot;properties&quot;</span>: &#123;&#125;,<br>      <span class="hljs-string">&quot;geometry&quot;</span>: &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;Point&quot;</span>, <span class="hljs-string">&quot;coordinates&quot;</span>: [<span class="hljs-number">113.254308</span>, <span class="hljs-number">23.416872</span>] &#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;Feature&quot;</span>,<br>      <span class="hljs-string">&quot;properties&quot;</span>: &#123;&#125;,<br>      <span class="hljs-string">&quot;geometry&quot;</span>: &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;Point&quot;</span>, <span class="hljs-string">&quot;coordinates&quot;</span>: [<span class="hljs-number">113.232409</span>, <span class="hljs-number">23.426934</span>] &#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;Feature&quot;</span>,<br>      <span class="hljs-string">&quot;properties&quot;</span>: &#123;&#125;,<br>      <span class="hljs-string">&quot;geometry&quot;</span>: &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;Point&quot;</span>, <span class="hljs-string">&quot;coordinates&quot;</span>: [<span class="hljs-number">113.161159</span>, <span class="hljs-number">23.400596</span>] &#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;Feature&quot;</span>,<br>      <span class="hljs-string">&quot;properties&quot;</span>: &#123;&#125;,<br>      <span class="hljs-string">&quot;geometry&quot;</span>: &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;Point&quot;</span>, <span class="hljs-string">&quot;coordinates&quot;</span>: [<span class="hljs-number">113.166207</span>, <span class="hljs-number">23.385075</span>] &#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;Feature&quot;</span>,<br>      <span class="hljs-string">&quot;properties&quot;</span>: &#123;&#125;,<br>      <span class="hljs-string">&quot;geometry&quot;</span>: &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;Point&quot;</span>, <span class="hljs-string">&quot;coordinates&quot;</span>: [<span class="hljs-number">113.307605</span>, <span class="hljs-number">23.389929</span>] &#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;Feature&quot;</span>,<br>      <span class="hljs-string">&quot;properties&quot;</span>: &#123;&#125;,<br>      <span class="hljs-string">&quot;geometry&quot;</span>: &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;Point&quot;</span>, <span class="hljs-string">&quot;coordinates&quot;</span>: [<span class="hljs-number">113.235221</span>, <span class="hljs-number">23.496927</span>] &#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;Feature&quot;</span>,<br>      <span class="hljs-string">&quot;properties&quot;</span>: &#123;&#125;,<br>      <span class="hljs-string">&quot;geometry&quot;</span>: &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;Point&quot;</span>, <span class="hljs-string">&quot;coordinates&quot;</span>: [<span class="hljs-number">113.155997</span>, <span class="hljs-number">23.483681</span>] &#125;<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>5、加载<code>geojson</code>数据。参考 <a href="https://liyoro.com/2020/05/26/vue%E6%9C%AC%E5%9C%B0%E6%A8%A1%E6%8B%9F%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%B7%E6%B1%82mock%E6%95%B0%E6%8D%AE/">vue本地模拟服务器请求mock数据</a></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">this</span>.geoLevelF = <span class="hljs-keyword">new</span> Loca.GeoJSONSource(&#123;<br>  url: publicPath + `<span class="hljs-regexp">/data/</span>huadu.geojson`<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>6、设置呼吸点数据，加载到地图上显示</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">this</span>.breathPoint.setSource(<span class="hljs-keyword">this</span>.geoLevelF)<br></code></pre></td></tr></table></figure><ul><li>7、效果</li></ul><p><img src="/img/Snip20210901_78.gif"></p><h2 id="代码总览"><a href="#代码总览" class="headerlink" title="代码总览"></a>代码总览</h2><p>涉及的文件如下（具体参考<strong>代码</strong>）：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">|-- public</span><br>    <span class="hljs-string">|-- data</span><br>        <span class="hljs-string">|-- huadu.geojson</span><br><span class="hljs-string">|-- src</span><br>    <span class="hljs-string">|-- components</span><br>        <span class="hljs-string">|-- map</span><br>            <span class="hljs-string">|-- locaPoint.vue</span><br>    <span class="hljs-string">|-- views</span><br>        <span class="hljs-string">|-- amapLocaTest    // 实例所在</span><br>            <span class="hljs-string">|-- index.vue</span><br>            <span class="hljs-string">|-- index.scss</span><br>            <span class="hljs-string">|-- index.js</span><br></code></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>按<code>代码总览</code>的目录去<a href="https://github.com/liyoro/vue-skill">代码</a>里找着看就行了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上，只是简单的使用了<code>geohub</code>的<strong>绘制点</strong>功能。还有绘制线、绘制面、自定义属性、上传数据、发布数据服务等功能有兴趣的自行探索了。</p><p>代码里面用Vue演示了高德地图<code>Loca 2.0</code>的一些数据可视化效果。除了呼吸点，还有<strong>脉冲线</strong>、<strong>连接线</strong>，具体看代码了。</p>]]></content>
    
    
    <categories>
      
      <category>高德地图</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
      <tag>高德地图</tag>
      
      <tag>GeoHUB</tag>
      
      <tag>Loca 2.0</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue视频播放进行+水印的截图</title>
    <link href="/2020/06/22/Vue%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E8%BF%9B%E8%A1%8C+%E6%B0%B4%E5%8D%B0%E7%9A%84%E6%88%AA%E5%9B%BE/"/>
    <url>/2020/06/22/Vue%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E8%BF%9B%E8%A1%8C+%E6%B0%B4%E5%8D%B0%E7%9A%84%E6%88%AA%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>视频相关项目，有时候需要对视频进行截图的，图片一般加上水印。</p><p>这里展示下普通视频播放和直播视频播放的加水印方式。</p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p>测试需要的视频资源用的 <a href="https://help.aliyun.com/learn/video.html?spm=a2c4g.11186623.0.0.3cc97ff09pWUhO">阿里视频中心</a></p><h2 id="video播放视频"><a href="#video播放视频" class="headerlink" title="video播放视频"></a>video播放视频</h2><p>一些非直播、不复杂的视频播放需求，直接用这个就好了，特别是一些演示用的项目。</p><p>目前，<code>&lt;video&gt;</code> 元素支持三种视频格式：<strong>MP4</strong>、<strong>WebM</strong>、<strong>Ogg</strong>。</p><ul><li><p>MP4：MPEG 4文件使用 H264 视频编解码器和AAC音频编解码器</p></li><li><p>WebM：WebM 文件使用 VP8 视频编解码器和 Vorbis 音频编解码器</p></li><li><p>Ogg ：Ogg 文件使用 Theora 视频编解码器和 Vorbis音频编解码器</p></li></ul><h3 id="主要实现代码"><a href="#主要实现代码" class="headerlink" title="主要实现代码"></a>主要实现代码</h3><p>具体可见 <a href="https://github.com/liyoro/vue-skill">代码</a></p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">&lt;video <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;video1&quot;</span> controls crossOrigin=<span class="hljs-string">&quot;Anonymous&quot;</span> class=<span class="hljs-string">&quot;image&quot;</span> width=<span class="hljs-string">&quot;520&quot;</span> height=<span class="hljs-string">&quot;320&quot;</span> style=<span class="hljs-string">&quot;object-fit: fill;&quot;</span>&gt;<br>  &lt;<span class="hljs-built_in">source</span> :src=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;video/mp4&quot;</span>&gt;<br>  您的浏览器不支持 video 标签。<br>&lt;/video&gt;<br></code></pre></td></tr></table></figure><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-title function_">captureClick</span>() &#123;<br>  <span class="hljs-keyword">const</span> v = document.<span class="hljs-property">querySelector</span>(<span class="hljs-string">&#x27;#video1&#x27;</span>)<br>  <span class="hljs-comment">// v.setAttribute(&#x27;crossOrigin&#x27;, &#x27;anonymous&#x27;)</span><br>  <span class="hljs-comment">// v.crossOrigin = &#x27;anonymous&#x27;</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-built_in">width</span> = v.<span class="hljs-property">videoWidth</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-built_in">height</span> = v.<span class="hljs-property">videoHeight</span><br><br>  <span class="hljs-keyword">const</span> canvas = window.<span class="hljs-property">canvas</span> = document.<span class="hljs-property">createElement</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>)<br>  canvas.<span class="hljs-property">width</span> = <span class="hljs-built_in">width</span><br>  canvas.<span class="hljs-property">height</span> = <span class="hljs-built_in">height</span><br><br>  <span class="hljs-keyword">const</span> ctx = canvas.<span class="hljs-property">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>)<br><br>  ctx.<span class="hljs-property">drawImage</span>(v, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-built_in">width</span>, <span class="hljs-built_in">height</span>)<br><br>  ctx.<span class="hljs-property">rotate</span>(<span class="hljs-number">-16</span> * Math.<span class="hljs-property">PI</span> / <span class="hljs-number">180</span>)<br>  ctx.<span class="hljs-property">font</span> = <span class="hljs-string">&#x27;100px 宋体&#x27;</span><br>  ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;rgba(255, 255, 255, 1)&#x27;</span><br>  ctx.<span class="hljs-property">fillText</span>(<span class="hljs-string">&#x27;测试水印&#x27;</span>, <span class="hljs-number">100</span>, <span class="hljs-built_in">height</span> - <span class="hljs-number">200</span>)<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-built_in">image</span> = canvas.<span class="hljs-property">toDataURL</span>(<span class="hljs-string">&#x27;image/png&#x27;</span>)<br>  <span class="hljs-variable">this</span>.<span class="hljs-property">captureImg1</span> = <span class="hljs-built_in">image</span><br>&#125;<br></code></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/img/Snip20210831_72.png"></p><h2 id="Aliplayer播放视频"><a href="#Aliplayer播放视频" class="headerlink" title="Aliplayer播放视频"></a>Aliplayer播放视频</h2><p>支持 <strong>MP4</strong>、<strong>FLV</strong>、<strong>M3U8</strong>、<strong>MP3</strong> 格式的视频，支持<strong>H.264</strong>编码的视频。<br>Flash模式下支持 <strong>RTMP</strong>，但是Flash已经不更新了，就忽略了。<a href="https://help.aliyun.com/document_detail/125570.html">详情参考文档</a></p><p>集成进项目可以用 <a href="https://github.com/langyuxiansheng/vue-aliplayer-v2">vue-aliplayer-v2</a>，也可以直接参考 <a href="https://help.aliyun.com/document_detail/125570.html">文档</a>。</p><p><a href="https://player.alicdn.com/aliplayer/presentation/index.html?type=autoAdjustHls">Aliplayer功能展示</a>，这里有代码看，不详细介绍了。</p><p>这个播放器本身就自带加水印截图的功能，按文档配置就好了。缺点也很明显，只可以文字，不好定制。需求不复杂的可以用这个。想自定义复杂水印的，可以参考下节 <code>EasyPlayer.js播放视频</code>相关来实现，原理都是一样的。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less">snapshotWatermark:&#123;<br>  <span class="hljs-attribute">left</span>:<span class="hljs-string">&quot;100&quot;</span>,<br>  <span class="hljs-attribute">top</span>:<span class="hljs-string">&quot;100&quot;</span>,<br>  <span class="hljs-attribute">text</span>:<span class="hljs-string">&quot;测试水印&quot;</span>,<br>  <span class="hljs-attribute">font</span>:<span class="hljs-string">&quot;italic bold 48px 宋体&quot;</span>,<br>  <span class="hljs-attribute">strokeColor</span>:<span class="hljs-string">&quot;red&quot;</span>,<br>  <span class="hljs-attribute">fillColor</span>:<span class="hljs-string">&#x27;green&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="EasyPlayer-js播放视频"><a href="#EasyPlayer-js播放视频" class="headerlink" title="EasyPlayer.js播放视频"></a>EasyPlayer.js播放视频</h2><p><a href="http://open.tsingsee.com/sdk/easyplayer/">Easyplayer</a> 支持的视频格式就比较全面了，是目前找到的唯一个支持播放 <strong>H.265</strong> 格式视频的H5播放器 <a href="https://github.com/tsingsee/EasyPlayer.js">EasyPlayer.js</a>，支持直播</p><p>网上使用这个播放器，大多数是用的旧版的方式，这里用的是最新版的方式。</p><blockquote><p><font color="#dd001b">注意：</font></p></blockquote><ul><li>1、目前这个播放器的最新版本，高度没有自动充满父容器，所以通过<code>scss</code>强行设定下，例如，这里设定<code>320px</code>的高度（对应的选择器，用谷歌浏览器的开发者工具，看Elements就可以找到）</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">::v-deep .video-<span class="hljs-keyword">wrapper</span> &#123;<br>  padding-bottom: <span class="hljs-number">0</span>px !important;<br>  height: <span class="hljs-number">320</span>px !important;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>2、视频播放的截图，<code>video</code>都需要配置下跨域。所有第三方的H5视频播放器，找到对应的<code>video</code>对象设置下便可，原理都一样的。例如，<code>Easyplayer.js</code>的跨域设置如下：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">this<span class="hljs-selector-class">.player2</span> = this.<span class="hljs-variable">$refs</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;video2&#x27;</span>]</span><span class="hljs-selector-class">.player</span><span class="hljs-selector-class">.el_</span><span class="hljs-selector-class">.children</span><span class="hljs-selector-attr">[0]</span><br>this<span class="hljs-selector-class">.player2</span><span class="hljs-selector-class">.setAttribute</span>(<span class="hljs-string">&#x27;crossOrigin&#x27;</span>, <span class="hljs-string">&#x27;Anonymous&#x27;</span>)<br></code></pre></td></tr></table></figure><p>此设置一定要在截图前设置好，不然不生效的。</p><h3 id="主要实现代码-1"><a href="#主要实现代码-1" class="headerlink" title="主要实现代码"></a>主要实现代码</h3><p>具体可见 <a href="https://github.com/liyoro/vue-skill">代码</a></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;EasyPlayer<br>  ref=<span class="hljs-string">&quot;video2&quot;</span><br>  class=<span class="hljs-string">&quot;video-view&quot;</span><br>  <span class="hljs-symbol">:video-url=<span class="hljs-string">&quot;url&quot;</span></span><br>  <span class="hljs-symbol">:stretch=<span class="hljs-string">&quot;true&quot;</span></span><br>  live<br>  autoplay<br>  fluent /&gt;<br></code></pre></td></tr></table></figure><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-title function_">captureClick2</span>() &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-built_in">width</span> = <span class="hljs-variable">this</span>.<span class="hljs-property">player2</span>.<span class="hljs-property">videoWidth</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-built_in">height</span> = <span class="hljs-variable">this</span>.<span class="hljs-property">player2</span>.<span class="hljs-property">videoHeight</span><br><br>  <span class="hljs-keyword">const</span> canvas = window.<span class="hljs-property">canvas</span> = document.<span class="hljs-property">createElement</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>)<br>  canvas.<span class="hljs-property">width</span> = <span class="hljs-built_in">width</span><br>  canvas.<span class="hljs-property">height</span> = <span class="hljs-built_in">height</span><br><br>  <span class="hljs-keyword">const</span> ctx = canvas.<span class="hljs-property">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>)<br><br>  ctx.<span class="hljs-property">drawImage</span>(<span class="hljs-variable">this</span>.<span class="hljs-property">player2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-built_in">width</span>, <span class="hljs-built_in">height</span>)<br><br>  ctx.<span class="hljs-property">rotate</span>(<span class="hljs-number">-16</span> * Math.<span class="hljs-property">PI</span> / <span class="hljs-number">180</span>)<br>  ctx.<span class="hljs-property">font</span> = <span class="hljs-string">&#x27;100px 宋体&#x27;</span><br>  ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;rgba(255, 255, 255, 1)&#x27;</span><br>  ctx.<span class="hljs-property">fillText</span>(<span class="hljs-string">&#x27;测试水印&#x27;</span>, <span class="hljs-number">100</span>, <span class="hljs-built_in">height</span> - <span class="hljs-number">200</span>)<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-built_in">image</span> = canvas.<span class="hljs-property">toDataURL</span>(<span class="hljs-string">&#x27;image/png&#x27;</span>)<br>  <span class="hljs-variable">this</span>.<span class="hljs-property">captureImg2</span> = <span class="hljs-built_in">image</span><br>&#125;<br></code></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/img/Snip20210831_73.png"></p><h2 id="代码总览"><a href="#代码总览" class="headerlink" title="代码总览"></a>代码总览</h2><p>涉及的文件如下（具体参考<strong>代码</strong>）：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">|-- src</span><br>    <span class="hljs-string">|-- views</span><br>        <span class="hljs-string">|-- videoCaptureTest    // 实例所在</span><br>            <span class="hljs-string">|-- index.vue</span><br>            <span class="hljs-string">|-- index.scss</span><br>            <span class="hljs-string">|-- index.js</span><br></code></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>按<code>代码总览</code>的目录去<a href="https://github.com/liyoro/vue-skill">代码</a>里找着看就行了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上，只是简单的展示了文字水印，想实现复杂的，参考<code>canvas</code>方法就行了，文字旋转、图片等都是可以的。</p>]]></content>
    
    
    <categories>
      
      <category>视频播放</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
      <tag>video</tag>
      
      <tag>Aliplayer</tag>
      
      <tag>EasyPlayer.js</tag>
      
      <tag>视频播放</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue对高德地图2.0的封装使用</title>
    <link href="/2020/06/20/Vue%E5%AF%B9%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE2.0%E7%9A%84%E5%B0%81%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/06/20/Vue%E5%AF%B9%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE2.0%E7%9A%84%E5%B0%81%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>在Vue项目里使用高德地图，网上有几个比较好用的，例如</p><ul><li><a href="https://jimnox.gitee.io/amap-vue/">AMap-Vue</a> ，文档很好，但不开源</li><li><a href="https://elemefe.github.io/vue-amap/#/">vue-amap</a> ，文档让人流泪</li></ul><p>懒人和需求不复杂的，可以直接使用上面的。上面两开源的已经不太活跃了，用的不放心。有些地图的高级功能，用起来特麻烦。所以，抛开第三方，封装自己的地图组件。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul><li>组件按需引入。个人喜欢代码干干净净，只要项目需要的功能就行了</li><li>简单的封装下，方便直接按官方文档使用需要的功能，方便复用</li><li>基于 <strong>Vue2</strong>，<strong>AMap 2.0</strong>，<strong>AMapUI 1.1</strong></li></ul><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li>Vue插槽 <code>slot</code>，方便在地图上使用各种<code>AMapUI</code>功能</li><li>Vue通知 <code>emit</code>、<code>on</code>。为了传参，主要是获取地图AMap对象</li><li>Vue组件封装，组件间有依赖的封装，可以参考</li><li>Vue异步加载组件</li><li>演示用的轨迹数据通过本地mock实现，参考 <a href="/2020/05/26/vue%E6%9C%AC%E5%9C%B0%E6%A8%A1%E6%8B%9F%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%B7%E6%B1%82mock%E6%95%B0%E6%8D%AE/">vue本地模拟服务器请求mock数据</a></li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="components-–-map-–-index-vue"><a href="#components-–-map-–-index-vue" class="headerlink" title="components – map – index.vue"></a>components – map – index.vue</h3><p>地图单文件组件，主要代码如下，具体参考<code>代码</code></p><figure class="highlight dust"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;amap-view&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;amapcontainer&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123; height: mapHeight &#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><h3 id="components-–-map-–-index-js"><a href="#components-–-map-–-index-js" class="headerlink" title="components – map – index.js"></a>components – map – index.js</h3><p>地图组件的业务代码，可以配置地图开放的属性<code>props</code>和监听事件。</p><p>例如这里，开放了<code>amapKey</code>(申请的高德地图key)，<code>styleId</code>(高德地图样式id)，<code>zoom</code>(缩放值)，<code>center</code>(地图加载默认中心点)，<code>height</code>(地图默认高度值)，<code>plugins</code>(地图默认加载的插件)，<code>uis</code>(地图默认加载的AMapUI)。</p><p>监听了地图加载完毕的事件<code>amap-ready</code>，地图加载完毕才能搞事。把地图对象传给<code>AMapUI</code>相关封装的组件，方便调用。</p><p>用的是高德地图2.0版本，项目里面加载主要参考官方文档 <a href="https://lbs.amap.com/api/jsapi-v2/guide/abc/load">高德地图JSAPI 的加载</a></p><p>主要代码如下，具体参考<code>代码</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">AMapLoader</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@amap/amap-jsapi-loader&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;AmapView&#x27;</span>,<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">amapKey</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,<br>      <span class="hljs-attr">default</span>: <span class="hljs-string">&#x27;6411e510973dc722ce416a298588ae4e&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">styleId</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,<br>      <span class="hljs-attr">default</span>: <span class="hljs-string">&#x27;728e2ca5c2c75aa8b26190a9e23c4687&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">zoom</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,<br>      <span class="hljs-attr">default</span>: <span class="hljs-number">12</span><br>    &#125;,<br>    <span class="hljs-attr">center</span>: &#123;<br>      <span class="hljs-attr">type</span>: [<span class="hljs-title class_">Array</span>, <span class="hljs-title class_">String</span>],<br>      <span class="hljs-title function_">default</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> [<span class="hljs-number">113.220218</span>, <span class="hljs-number">23.404165</span>]<br>      &#125;<br>    &#125;,<br>    <span class="hljs-attr">height</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span> | <span class="hljs-title class_">String</span>,<br>      <span class="hljs-attr">default</span>: <span class="hljs-number">520</span><br>    &#125;,<br>    <span class="hljs-attr">plugins</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Array</span>,<br>      <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> []<br>    &#125;,<br>    <span class="hljs-attr">uis</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Array</span>,<br>      <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> [<span class="hljs-string">&#x27;overlay/SimpleMarker&#x27;</span>]<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-title function_">mapHeight</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">isNaN</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">height</span>) ? <span class="hljs-variable language_">this</span>.<span class="hljs-property">height</span> : <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.height&#125;</span>px`</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">map</span>: <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-title function_">beforeDestroy</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">map</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">map</span>.<span class="hljs-title function_">destroy</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">map</span> = <span class="hljs-literal">null</span><br>  &#125;,<br>  <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">initMap</span>()<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">initMap</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title class_">AMapLoader</span>.<span class="hljs-title function_">load</span>(&#123;<br>        <span class="hljs-attr">key</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">amapKey</span>,<br>        <span class="hljs-attr">version</span>: <span class="hljs-string">&#x27;2.0&#x27;</span>,<br>        <span class="hljs-title class_">AMapUI</span>: &#123;<br>          <span class="hljs-attr">version</span>: <span class="hljs-string">&#x27;1.1&#x27;</span>,<br>          <span class="hljs-attr">plugins</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">uis</span><br>        &#125;<br>      &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">AMap</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">map</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMap</span>.<span class="hljs-title class_">Map</span>(<span class="hljs-string">&#x27;amapcontainer&#x27;</span>, &#123;<br>          <span class="hljs-attr">zoom</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">zoom</span>, <span class="hljs-comment">// 级别</span><br>          <span class="hljs-attr">center</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">center</span>, <span class="hljs-comment">// 中心点坐标</span><br>          <span class="hljs-attr">mapStyle</span>: <span class="hljs-string">`amap://styles/<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.styleId&#125;</span>`</span><br>        &#125;)<br>        <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;amap-ready&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">map</span>)<br>      &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)<br>      &#125;)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="components-–-map-–polyLine-vue"><a href="#components-–-map-–polyLine-vue" class="headerlink" title="components – map –polyLine.vue"></a>components – map –polyLine.vue</h3><p>轨迹组件，主要开放了轨迹属性<code>linePath</code>，方便界面调用传参。具体属性配置参考文档 <a href="https://lbs.amap.com/api/amap-ui/reference-amap-ui/mass-data/pathsimplifier">pathsimplifier</a></p><p>主要代码如下，具体参考<code>代码</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;AmapPolyline&#x27;</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">props</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">linePath</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Array</span>,</span><br><span class="language-javascript">      <span class="hljs-title function_">default</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> []</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$parent</span>.$on(<span class="hljs-string">&#x27;amap-ready&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">initComponents</span>)</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">initComponents</span>(<span class="hljs-params">amap</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-title class_">AMapUI</span>.<span class="hljs-title function_">load</span>([<span class="hljs-string">&#x27;ui/misc/PathSimplifier&#x27;</span>], <span class="hljs-function">(<span class="hljs-params">PathSimplifier</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">PathSimplifier</span>.<span class="hljs-property">supportCanvas</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;当前环境不支持 Canvas！&#x27;</span>)</span><br><span class="language-javascript">          <span class="hljs-keyword">return</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> pathSimplifierIns = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PathSimplifier</span>(&#123;</span><br><span class="language-javascript">          <span class="hljs-attr">zIndex</span>: <span class="hljs-number">100</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">map</span>: amap, <span class="hljs-comment">// 所属的地图实例</span></span><br><span class="language-javascript">          <span class="hljs-attr">getPath</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">pathData, pathIndex</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> pathData.<span class="hljs-property">path</span></span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">          <span class="hljs-attr">getHoverTitle</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">pathData, pathIndex, pointIndex</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (pointIndex &gt;= <span class="hljs-number">0</span>) &#123;</span><br><span class="language-javascript">              <span class="hljs-keyword">return</span> pathData.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;，点：&#x27;</span> + pointIndex + <span class="hljs-string">&#x27;/&#x27;</span> + pathData.<span class="hljs-property">path</span>.<span class="hljs-property">length</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> pathData.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;，点数量&#x27;</span> + pathData.<span class="hljs-property">path</span>.<span class="hljs-property">length</span></span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">          <span class="hljs-attr">renderOptions</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">renderAllPointsIfNumberBelow</span>: <span class="hljs-number">100</span> <span class="hljs-comment">// 绘制路线节点，如不需要可设置为-1</span></span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 设置数据</span></span><br><span class="language-javascript">        pathSimplifierIns.<span class="hljs-title function_">setData</span>([&#123;</span><br><span class="language-javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;路线0&#x27;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">path</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">linePath</span></span><br><span class="language-javascript">        &#125;])</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 对第一条线路（即索引 0）创建一个巡航器</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> navg1 = pathSimplifierIns.<span class="hljs-title function_">createPathNavigator</span>(<span class="hljs-number">0</span>, &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">loop</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 循环播放</span></span><br><span class="language-javascript">          <span class="hljs-attr">speed</span>: <span class="hljs-number">100</span> <span class="hljs-comment">// 巡航速度，单位千米/小时</span></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        navg1.<span class="hljs-title function_">start</span>()</span><br><span class="language-javascript">      &#125;)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="调用方式"><a href="#调用方式" class="headerlink" title="调用方式"></a>调用方式</h2><p>具体参考<code>polylineTest </code>里面的代码</p><h3 id="polylineTest-–-index-vue"><a href="#polylineTest-–-index-vue" class="headerlink" title="polylineTest – index.vue"></a>polylineTest – index.vue</h3><p>组件的调用方式</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;amap-<span class="hljs-keyword">view</span>&gt;<br>  &lt;amap-polyline :<span class="hljs-type">line</span>-<span class="hljs-type">path</span>=&quot;data&quot; /&gt;<br>&lt;/amap-<span class="hljs-keyword">view</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="polylineTest-–-index-js"><a href="#polylineTest-–-index-js" class="headerlink" title="polylineTest – index.js"></a>polylineTest – index.js</h3><p>这里模拟请求轨迹数据，异步加载封装的地图组件<code>AmapView </code>和轨迹组件<code>AmapPolyline </code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; polylineData &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/api/polyline&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;polylineTestView&#x27;</span>,<br>  <span class="hljs-attr">components</span>: &#123;<br>    <span class="hljs-title class_">AmapView</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span> (<span class="hljs-string">&#x27;@/components/map/index.vue&#x27;</span>),<br>    <span class="hljs-title class_">AmapPolyline</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span> (<span class="hljs-string">&#x27;@/components/map/polyLine.vue&#x27;</span>)<br>  &#125;,<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">data</span>: []<br>    &#125;<br>  &#125;,<br>  <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">testData</span>()<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-keyword">async</span> <span class="hljs-title function_">testData</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">const</span> &#123; code, result &#125; = <span class="hljs-keyword">await</span> <span class="hljs-title function_">polylineData</span>()<br>      <span class="hljs-keyword">if</span> (code !== <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span> = result.<span class="hljs-property">data</span><br>    &#125;<br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>纯地图组件效果</p></blockquote><p><img src="/img/Snip20210820_71.png"></p><blockquote><p>带上轨迹组件效果</p></blockquote><p><img src="/img/Snip20210820_71.gif"></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><code>createPathNavigator</code>的<code>speed</code>属性，在<font color="#dd001b">放大地图（zoom值很大）</font>的时候，千万别设置太大的值，不然会看不到轨迹运动的效果的，一动不动，莫名其妙的。代码没问题，但是没效果，这真的很蛋疼。估计是运动太快，眼睛跟不上。</p><h2 id="代码总览"><a href="#代码总览" class="headerlink" title="代码总览"></a>代码总览</h2><p>涉及的文件如下（具体参考<strong>代码</strong>）：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">|-- public</span><br>    <span class="hljs-string">|-- data</span><br>        <span class="hljs-string">|-- polyline.json    // 演示用轨迹数据</span><br><span class="hljs-string">|-- src</span><br>    <span class="hljs-string">|-- api</span><br>        <span class="hljs-string">|-- polyline.js    // 模拟真实数据接口请求</span><br>    <span class="hljs-string">|-- components</span><br>        <span class="hljs-string">|-- map</span><br>            <span class="hljs-string">|-- index.vue    // 地图单文件组件，供界面调用</span><br>            <span class="hljs-string">|-- index.js    // 地图初始化、配置相关</span><br>            <span class="hljs-string">|-- polyLine.vue    // 简单封装的轨迹组件，演示用</span><br>    <span class="hljs-string">|-- views</span><br>        <span class="hljs-string">|-- polylineTest    // 演示实例所在</span><br>            <span class="hljs-string">|-- index.vue</span><br>            <span class="hljs-string">|-- index.scss</span><br>            <span class="hljs-string">|-- index.js</span><br></code></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>按<code>代码总览</code>的目录去<a href="https://github.com/liyoro/vue-skill">代码</a>里找着看就行了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上，只是简单的封装。轨迹组件只是在 <a href="https://lbs.amap.com/demo/list/amap-ui">JS API UI 组件示例</a> 上面随便找了个<code>轨迹展示</code>的<code>简单路径</code>的示例代码。真正使用的时候，可以看需求拓展。像轨迹上面的每个点，可以弹窗显示具体地点的信息的，这个在人员轨迹展示的时候，很常用到。这个涉及到Vue实时渲染组件的用法，这里不多说了。</p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
      <tag>高德地图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue+ Element，记动态生成表格在一个运维项目中的应用</title>
    <link href="/2020/05/31/Vue+%20Element%EF%BC%8C%E8%AE%B0%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90%E8%A1%A8%E6%A0%BC%E5%9C%A8%E4%B8%80%E4%B8%AA%E8%BF%90%E7%BB%B4%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <url>/2020/05/31/Vue+%20Element%EF%BC%8C%E8%AE%B0%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90%E8%A1%A8%E6%A0%BC%E5%9C%A8%E4%B8%80%E4%B8%AA%E8%BF%90%E7%BB%B4%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>运维需要，需要把运维时命令行查询的结果在前端展示，对界面有一些特定的要求，这里分享下一些主要功能的实现。</p><ul><li>1、要求前端表格界面动态生成，方便后台修改</li><li>2、列值可排序（时间比较、数值比较……）</li><li>3、列值可筛选（根据列值类型……）</li><li>4、表格数据可导出<code>Excel</code>，文件名接口返回（因为模块很多）+当前时间。</li><li>5、提供关键列搜索功能</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul><li>前端界面用<a href="https://element.eleme.cn/2.15/#/zh-CN">element-ui</a>，组件按需引入</li><li>数据通过本地mock实现，参考<a href="/2020/05/26/vue%E6%9C%AC%E5%9C%B0%E6%A8%A1%E6%8B%9F%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%B7%E6%B1%82mock%E6%95%B0%E6%8D%AE/">vue本地模拟服务器请求mock数据</a></li></ul><h3 id="表格界面动态生成"><a href="#表格界面动态生成" class="headerlink" title="表格界面动态生成"></a>表格界面动态生成</h3><p>表格主要用<code>el-table</code>实现。主要代码如下</p><figure class="highlight handlebars"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;tableShowData&quot;</span> <span class="hljs-attr">:border</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;420&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;col in tableCols&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;col.prop&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:prop</span>=<span class="hljs-string">&quot;col.prop&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;col.label&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;scope&quot;</span>&gt;</span></span><br><span class="language-xml">      </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">scope.row</span>[col.prop] &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>想动态生成表格，主要是要和后台约定好传输的数据。表头数据<code>cols</code>、列表数据 <code>data</code>的属性要一一对应好。模拟数据如下，一般根据需求提供好字段，直接让后台按此格式传就行了。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>  <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;成功&quot;</span>,<br>  <span class="hljs-string">&quot;result&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;cols&quot;</span>: [<br>      &#123;<br>        <span class="hljs-string">&quot;prop&quot;</span>: <span class="hljs-string">&quot;date&quot;</span>,<br>        <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;日期&quot;</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-string">&quot;prop&quot;</span>: <span class="hljs-string">&quot;name&quot;</span>,<br>        <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;姓名&quot;</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-string">&quot;prop&quot;</span>: <span class="hljs-string">&quot;address&quot;</span>,<br>        <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;地址&quot;</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-string">&quot;prop&quot;</span>: <span class="hljs-string">&quot;type&quot;</span>,<br>        <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;类型&quot;</span><br>      &#125;<br>    ],<br>    <span class="hljs-string">&quot;data&quot;</span>: [<br>      &#123;<br>        <span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;2021-08-02&quot;</span>,<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;小红&quot;</span>,<br>        <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;王子山&quot;</span>,<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;旅游&quot;</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;2021-08-06&quot;</span>,<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;小智&quot;</span>,<br>        <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;探鱼&quot;</span>,<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;美食&quot;</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;2021-08-03&quot;</span>,<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;小明&quot;</span>,<br>        <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;石头记&quot;</span>,<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;旅游&quot;</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;2021-08-07&quot;</span>,<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;小伟&quot;</span>,<br>        <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;如轩砂锅粥&quot;</span>,<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;美食&quot;</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;2021-08-04&quot;</span>,<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;小李&quot;</span>,<br>        <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;香草世界&quot;</span>,<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;旅游&quot;</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;2021-08-08&quot;</span>,<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;小二&quot;</span>,<br>        <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;柴灶鱼&quot;</span>,<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;美食&quot;</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;2021-08-05&quot;</span>,<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;小黄&quot;</span>,<br>        <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;融创文旅城&quot;</span>,<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;旅游&quot;</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;2021-08-09&quot;</span>,<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;小四&quot;</span>,<br>        <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;佬麻雀&quot;</span>,<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;美食&quot;</span><br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这时候得到的表格长这样</p><p><img src="/img/Snip20210813_3.png"></p><h3 id="列值排序"><a href="#列值排序" class="headerlink" title="列值排序"></a>列值排序</h3><p><code>el-table</code>本身就提供了列值排序的功能。直接给<code>el-table-column</code>加上<code>sortable</code>属性就可以了。实际应用的时候，一般哪一列可以排序，是需要配置的，这时候，给模拟数据的<code>cols</code>每项加上一个<font color="#00A267">“sortable”: true</font>或者<font color="#F02612">“sortable”: false</font>就行了</p><blockquote><p>具体数据参考 <strong>table.json</strong>文件</p></blockquote><p>加了排序属性后，表格长这样</p><p><img src="/img/Snip20210813_4.png"></p><p>前3列配置了<code>true</code>，点击小箭头，就可以升序或者降序查看列表的数据</p><h3 id="列值筛选"><a href="#列值筛选" class="headerlink" title="列值筛选"></a>列值筛选</h3><p>有时候，列值是一些分类值来的，例如地区、服务器种类、状态等。这时候就需要筛选了。<code>el-table</code>本身就提供了列值筛选的功能。同样，实际应用的时候，一般哪一列可以显示筛选项，是需要配置的，这时候，给模拟数据的<code>cols</code>每项加上一个<font color="#00A267">“filters”: []</font>的数组，里面存放筛选项。</p><p>这里要注意</p><ul><li>默认传空就是列无筛选功能</li><li><code>filters</code>里面要包含筛选项的 text 和 value 属性。具体值要和列对应</li></ul><blockquote><p>具体数据参考 <strong>table.json</strong>文件</p></blockquote><p>接着按<code>el-table</code>文档配置就行了</p><p>加了筛选属性后，表格长这样</p><p><img src="/img/Snip20210813_5.png"></p><p>这里要注意了，上面只给<code>类型</code>列配置了非空的<code>filters</code>，没配置的不应该出现筛选小箭头的。</p><p><code>el-table</code>的列值筛选功能，会在表头用一个<code>下箭头图标</code>来控制，此图标没提供显示、隐藏的功能，导致不需要提供列值筛选功能的<font color="#dd001b">列</font>也会显示这个图标，这里利用<code>el-table-column</code>的<code>class-name</code>属性，使用vue的样式穿透<font color="#dd001b">::v-deep</font>来动态控制此图标的显隐。具体看下面的代码了。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;el-table <span class="hljs-symbol">:data=<span class="hljs-string">&quot;tableShowData&quot;</span></span> <span class="hljs-symbol">:border=<span class="hljs-string">&quot;true&quot;</span></span> height=<span class="hljs-string">&quot;420&quot;</span> style=<span class="hljs-string">&quot;width: 100%&quot;</span>&gt;<br>  &lt;el-table-column<br>    v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;col in tableCols&quot;</span><br>    <span class="hljs-symbol">:key=<span class="hljs-string">&quot;col.prop&quot;</span></span><br>    <span class="hljs-symbol">:prop=<span class="hljs-string">&quot;col.prop&quot;</span></span><br>    <span class="hljs-symbol">:label=<span class="hljs-string">&quot;col.label&quot;</span></span><br>    <span class="hljs-symbol">:filters=<span class="hljs-string">&quot;col.filters&quot;</span></span><br>    filter-placement=<span class="hljs-string">&quot;bottom-end&quot;</span><br>    <span class="hljs-symbol">:filter-method=<span class="hljs-string">&quot;filterTag&quot;</span></span><br>    <span class="hljs-symbol">:sortable=<span class="hljs-string">&quot;col.sortable&quot;</span></span><br>    <span class="hljs-symbol">:class-name=<span class="hljs-string">&quot;col.filters.length==0?&#x27;hide-filter&#x27;:&#x27;show-filter&#x27;&quot;</span>&gt;</span><br>    &lt;template slot-scope=<span class="hljs-string">&quot;scope&quot;</span>&gt;<br>      &#123;&#123; scope.row[col.prop] &#125;&#125;<br>    &lt;/template&gt;<br>  &lt;/el-table-column&gt;<br>&lt;/el-table&gt;<br></code></pre></td></tr></table></figure><p> 相关css</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">::v-deep .hide-<span class="hljs-keyword">filter</span> &#123;<br>  .el-table__column-<span class="hljs-keyword">filter</span>-<span class="hljs-keyword">trigger</span> &#123;<br>    display: <span class="hljs-keyword">none</span> !important;<br>  &#125;<br>&#125;<br>::v-deep .<span class="hljs-keyword">show</span>-<span class="hljs-keyword">filter</span> &#123;<br>  .el-table__column-<span class="hljs-keyword">filter</span>-<span class="hljs-keyword">trigger</span> &#123;<br>    display: <span class="hljs-keyword">inline</span>-block !important;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调整后，表格长这样</p><p><img src="/img/Snip20210813_7.png"></p><h3 id="表格数据导出Excel"><a href="#表格数据导出Excel" class="headerlink" title="表格数据导出Excel"></a>表格数据导出Excel</h3><p>导出<code>Excel</code>的代码直接用的<strong>PanJiaChen</strong>的全家桶项目<a href="https://github.com/PanJiaChen/vue-element-admin">vue-element-admin</a>里的代码。没什么好说的。</p><p>主要是实际应用的时候，可以在接口数据里面传文件名，方便识别下载模块。例如，这里就在模拟数据里面定义了一个<code>filename</code>字段。</p><h3 id="关键列搜索功能"><a href="#关键列搜索功能" class="headerlink" title="关键列搜索功能"></a>关键列搜索功能</h3><ul><li>1、可选搜索列</li><li>2、输入搜索内容</li><li>3、搜索、重置</li></ul><p>搜索功能的时候，主要是用了数组的<code>filter</code>匹配功能，搜的是本地数据，具体实现看代码了。</p><p>同样，实际应用的时候，一般哪一列可以搜索，是需要配置的，这时候，在模拟数据里面添加一个<code>searchcols</code>数组，用来下拉选择搜索列。</p><p>这个是最终效果了</p><p><img src="/img/Snip20210813_8.png"></p><h2 id="代码总览"><a href="#代码总览" class="headerlink" title="代码总览"></a>代码总览</h2><p>主要涉及的文件如下（具体参考<strong>代码</strong>）：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">|-- public</span><br>    <span class="hljs-string">|-- data</span><br>        <span class="hljs-string">|-- table.json   // 模拟数据</span><br><span class="hljs-string">|-- src</span><br>    <span class="hljs-string">|-- utils</span><br>        <span class="hljs-string">|-- Export2Excel.js    // 导出Excel</span><br>    <span class="hljs-string">|-- views</span><br>        <span class="hljs-string">|-- dynamicTableTest    // 实例所在</span><br>            <span class="hljs-string">|-- index.vue</span><br>            <span class="hljs-string">|-- index.scss</span><br>            <span class="hljs-string">|-- index.js</span><br></code></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>按<code>代码总览</code>的目录去<a href="https://github.com/liyoro/vue-skill">代码</a>里找着看就行了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>简单了实现了下动态表格，这个模块可以封装成一个组件使用，或者通过<code>mixin</code>在每个页面里面使用，还算方便。</p><h2 id="谢谢"><a href="#谢谢" class="headerlink" title="谢谢"></a>谢谢</h2><p><strong>PanJiaChen</strong>的全家桶项目<a href="https://github.com/PanJiaChen/vue-element-admin">vue-element-admin</a>可以说是vue2时代里的大佬了，此项目里的解决方案对大多数的中后台项目都很值得参考。感谢大佬的贡献！</p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
      <tag>Element</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue项目中封装echarts的比较优雅的方式</title>
    <link href="/2020/05/28/vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%B0%81%E8%A3%85echarts%E7%9A%84%E6%AF%94%E8%BE%83%E4%BC%98%E9%9B%85%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
    <url>/2020/05/28/vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%B0%81%E8%A3%85echarts%E7%9A%84%E6%AF%94%E8%BE%83%E4%BC%98%E9%9B%85%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ul><li>1、<a href="https://echarts.apache.org/zh/index.html">Echarts</a>使用时，都需要写一堆的<strong>option</strong>，如果每个图表都要写一个，一个文件里面的代码量是很大的</li><li>2、不方便复用</li></ul><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul><li>1、方便复用</li><li>2、展示类的图表，数据与业务、样式分离，只传数据就行</li><li>3、项目里需要用到的图表会有多个，实现少代码自动化导入，不需要一个个<strong>import</strong></li><li>4、本人图表用在大屏数据可视化的情况比较多，采用的是等比缩放的方式，所以图表也能根据界面缩放自动缩放，不需要手动调用</li><li>5、图表可配置</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="components–chart–index-vue"><a href="#components–chart–index-vue" class="headerlink" title="components–chart–index.vue"></a>components–chart–index.vue</h3><p>这里定义了一个名为<code>ChartView </code>的组件，开放了4个可配置的属性：宽度<code>width</code>，高度<code>height</code>， 是否自动调整大小<code>autoResize</code>（默认是），  图表的配置<code>chartOption</code>。</p><p>这里默认用<code>Canvas </code>渲染图表了，也可以用<code>SVG</code>的，自选吧</p><p>具体代码如下</p><figure class="highlight kotlin"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></div></td><td class="code"><pre><code class="hljs kotlin">&lt;template&gt;<br>  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;<span class="hljs-title">chart</span>&quot;&gt;</span><br>    &lt;div ref=<span class="hljs-string">&quot;chart&quot;</span> :style=<span class="hljs-string">&quot;&#123; height: height, width: width &#125;&quot;</span> /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><br><span class="hljs-comment">// 引入 echarts 核心模块，核心模块提供了 echarts 使用必须要的接口。</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> echarts from <span class="hljs-string">&#x27;echarts/core&#x27;</span><br><span class="hljs-comment">// 引入柱状图图表，图表后缀都为 Chart</span><br><span class="hljs-keyword">import</span> &#123;<br>  BarChart<br>&#125; from <span class="hljs-string">&#x27;echarts/charts&#x27;</span><br><span class="hljs-comment">// 引入提示框，标题，直角坐标系组件，组件后缀都为 Component</span><br><span class="hljs-keyword">import</span> &#123;<br>  TitleComponent,<br>  TooltipComponent,<br>  GridComponent<br>&#125; from <span class="hljs-string">&#x27;echarts/components&#x27;</span><br><span class="hljs-comment">// 引入 Canvas 渲染器，注意引入 CanvasRenderer 或者 SVGRenderer 是必须的一步</span><br><span class="hljs-keyword">import</span> &#123;<br>  CanvasRenderer<br>&#125; from <span class="hljs-string">&#x27;echarts/renderers&#x27;</span><br><br><span class="hljs-comment">// 注册必须的组件</span><br>echarts.use(<br>  [TitleComponent, TooltipComponent, GridComponent, BarChart, CanvasRenderer]<br>)<br><br>export default &#123;<br>  name: <span class="hljs-string">&#x27;ChartView&#x27;</span>,<br>  props: &#123;<br>    width: &#123;<br>      type: String,<br>      default: <span class="hljs-string">&#x27;100%&#x27;</span><br>    &#125;,<br>    height: &#123;<br>      type: String,<br>      default: <span class="hljs-string">&#x27;350px&#x27;</span><br>    &#125;,<br>    autoResize: &#123;<br>      type: <span class="hljs-built_in">Boolean</span>,<br>      default: <span class="hljs-literal">true</span><br>    &#125;,<br>    chartOption: &#123;<br>      type: Object,<br>      required: <span class="hljs-literal">true</span><br>    &#125;,<br>    type: &#123;<br>      type: String,<br>      default: <span class="hljs-string">&#x27;canvas&#x27;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-keyword">data</span>() &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      chart: <span class="hljs-literal">null</span><br>    &#125;<br>  &#125;,<br>  watch: &#123;<br>    chartOption: &#123;<br>      deep: <span class="hljs-literal">true</span>,<br>      handler(newVal) &#123;<br>        <span class="hljs-keyword">this</span>.setOptions(newVal)<br>      &#125;<br>    &#125;<br>  &#125;,<br>  mounted() &#123;<br>    <span class="hljs-keyword">this</span>.initChart()<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.autoResize) &#123;<br>      window.addEventListener(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-keyword">this</span>.resizeHandler)<br>    &#125;<br>  &#125;,<br>  beforeDestroy() &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.chart) &#123;<br>      <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.autoResize) &#123;<br>      window.removeEventListener(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-keyword">this</span>.resizeHandler)<br>    &#125;<br>    <span class="hljs-keyword">this</span>.chart.dispose()<br>    <span class="hljs-keyword">this</span>.chart = <span class="hljs-literal">null</span><br>  &#125;,<br>  methods: &#123;<br>    resizeHandler() &#123;<br>      <span class="hljs-keyword">this</span>.chart.resize()<br>    &#125;,<br>    initChart() &#123;<br>      <span class="hljs-keyword">this</span>.chart = echarts.<span class="hljs-keyword">init</span>(<span class="hljs-keyword">this</span>.$refs.chart, <span class="hljs-string">&#x27;&#x27;</span>, &#123;<br>        renderer: <span class="hljs-keyword">this</span>.type<br>      &#125;)<br>      <span class="hljs-keyword">this</span>.chart.setOption(<span class="hljs-keyword">this</span>.chartOption)<br>      <span class="hljs-keyword">this</span>.chart.on(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">this</span>.handleClick)<br>    &#125;,<br>    handleClick(params) &#123;<br>      <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">&#x27;click&#x27;</span>, params)<br>    &#125;,<br>    setOptions(option) &#123;<br>      <span class="hljs-keyword">this</span>.clearChart()<br>      <span class="hljs-keyword">this</span>.resizeHandler()<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.chart) &#123;<br>        <span class="hljs-keyword">this</span>.chart.setOption(option)<br>      &#125;<br>    &#125;,<br>    refresh() &#123;<br>      <span class="hljs-keyword">this</span>.setOptions(<span class="hljs-keyword">this</span>.chartOption)<br>    &#125;,<br>    clearChart() &#123;<br>      <span class="hljs-keyword">this</span>.chart &amp;&amp; <span class="hljs-keyword">this</span>.chart.clear()<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="components–chart–index-js"><a href="#components–chart–index-js" class="headerlink" title="components–chart–index.js"></a>components–chart–index.js</h3><p>这里主要利用<code>require.context</code>，把<code>options</code>里面定义的图表遍历导入，这样就不需要在代码里一个个<code>import</code>了，特别是图表多的时候。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> modulesFiles = <span class="hljs-built_in">require</span>.<span class="hljs-title function_">context</span>(<span class="hljs-string">&#x27;./options&#x27;</span>, <span class="hljs-literal">true</span>, <span class="hljs-regexp">/index.js$/</span>)<br><span class="hljs-keyword">let</span> modules = &#123;&#125;<br>modulesFiles.<span class="hljs-title function_">keys</span>().<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>  modules = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, modules, <span class="hljs-title function_">modulesFiles</span>(item).<span class="hljs-property">default</span>)<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> modules<br></code></pre></td></tr></table></figure><h3 id="components–chart–options"><a href="#components–chart–options" class="headerlink" title="components–chart–options"></a>components–chart–options</h3><p>这里展示下如何封装自己想要的图表</p><p>在<a href="https://echarts.apache.org/examples/zh/index.html">Echarts官方示例</a>上随便选了个示例</p><p><img src="/img/Snip20210812_59.png"></p><p>在<code>options</code>下新建一个<code>bar</code>目录，<code>bar</code>目录下新建一个<code>index.js</code>文件。（个人习惯而已，喜欢每个图表都独立文件夹存放。不喜欢这种方式的，可以不放目录，直接js文件，但是<code>components--chart--index.js</code>要对应修改下）</p><p>直接复制示例的<code>option</code>代码</p><p><code>index.js</code>具体代码如下</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">const</span> testBar = (data) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> defaultConfig = &#123;<br>    xAxis: &#123;<br>      type: <span class="hljs-string">&#x27;category&#x27;</span>,<br>      data: [<span class="hljs-string">&#x27;Mon&#x27;</span>, <span class="hljs-string">&#x27;Tue&#x27;</span>, <span class="hljs-string">&#x27;Wed&#x27;</span>, <span class="hljs-string">&#x27;Thu&#x27;</span>, <span class="hljs-string">&#x27;Fri&#x27;</span>, <span class="hljs-string">&#x27;Sat&#x27;</span>, <span class="hljs-string">&#x27;Sun&#x27;</span>]<br>    &#125;,<br>    yAxis: &#123;<br>      type: <span class="hljs-string">&#x27;value&#x27;</span><br>    &#125;,<br>    series: [&#123;<br>      data: [<span class="hljs-number">120</span>, <span class="hljs-number">200</span>, <span class="hljs-number">150</span>, <span class="hljs-number">80</span>, <span class="hljs-number">70</span>, <span class="hljs-number">110</span>, <span class="hljs-number">130</span>],<br>      type: <span class="hljs-string">&#x27;bar&#x27;</span><br>    &#125;]<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> opt = <span class="hljs-built_in">Object</span>.assign(&#123;&#125;, defaultConfig)<br>  <span class="hljs-keyword">return</span> opt<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  testBar<br>&#125;<br></code></pre></td></tr></table></figure><p><code>testBar</code>方法是可以传参的，具体使用的时候，图表所需要配置的属性，如：data数据、图表颜色……等都可以作为参数传。</p><h3 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h3><p>这里全局引入下封装的Echarts组件，方便界面调用。（至于单个引用的方式，就不必多说了）</p><p>具体代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> eChartFn <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/chart/index.js&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ChartPanel</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/chart/index.vue&#x27;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-title class_">ChartPanel</span>.<span class="hljs-property">name</span>, <span class="hljs-title class_">ChartPanel</span>)<br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$eChartFn</span> = eChartFn<br></code></pre></td></tr></table></figure><h3 id="chartTest"><a href="#chartTest" class="headerlink" title="chartTest"></a>chartTest</h3><p>这里展示下如何调用封装的<code>bar</code>图表，主要代码如下</p><h4 id="index-vue"><a href="#index-vue" class="headerlink" title="index.vue"></a>index.vue</h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;chart-view class=<span class="hljs-string">&quot;chart-content&quot;</span> <span class="hljs-symbol">:chart-option=<span class="hljs-string">&quot;chartOpt&quot;</span></span> <span class="hljs-symbol">:auto-resize=<span class="hljs-string">&quot;true&quot;</span></span> height=<span class="hljs-string">&quot;100%&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><h4 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;chartTestView&#x27;</span>,<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">chartOpt</span>: &#123;&#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;&#125;,<br>  <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">chartOpt</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$eChartFn</span>.<span class="hljs-title function_">testBar</span>()<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>  &#125;,<br>  <span class="hljs-attr">watch</span>: &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果如下</p><p><img src="/img/Snip20210812_60.png"></p><p>可以尝试拖动浏览器的大小，可以看到，图表也是随着浏览器的拖动自动缩放的。</p><h2 id="代码总览"><a href="#代码总览" class="headerlink" title="代码总览"></a>代码总览</h2><p>涉及的文件如下（具体参考<strong>代码</strong>）：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">|-- src</span><br>    <span class="hljs-string">|-- components</span><br>        <span class="hljs-string">|-- chart</span><br>            <span class="hljs-string">|-- index.vue    // 图表单文件组件，供界面调用</span><br>            <span class="hljs-string">|-- index.js    // 实现自动化导入options里的图表option</span><br>            <span class="hljs-string">|-- options    // 存放各种图表的option</span><br>                <span class="hljs-string">|-- bar    // 随便一例子</span><br>                    <span class="hljs-string">|-- index.js</span><br>    <span class="hljs-string">|-- views</span><br>        <span class="hljs-string">|-- chartTest    // 实例所在</span><br>            <span class="hljs-string">|-- index.vue</span><br>            <span class="hljs-string">|-- index.scss</span><br>            <span class="hljs-string">|-- index.js</span><br><span class="hljs-string">|-- main.js    // 全局引入echarts图表</span><br></code></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>按<code>代码总览</code>的目录去<a href="https://github.com/liyoro/vue-skill">代码</a>里找着看就行了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Echarts用到的各种图表，基本上都可以在<a href="https://echarts.apache.org/examples/zh/index.html">Echarts官方示例</a>和<a href="https://www.makeapie.com/explore.html">Echarts可视化作品分享</a>上找到，特别是<a href="https://www.makeapie.com/explore.html">Echarts可视化作品分享</a>，做项目的时候，可以去参考。</p><p>以上，封装了<code>chart</code>组件，按照上述方式，把图表的<code>option</code>配置和相关处理都放<code>options</code>文件夹下面，调用图表时传对应的<code>option</code>，也就几行代码的事情，算是比较方便了。</p><p><code>chart</code>组件很方便复用的，直接就可以使用了。</p>]]></content>
    
    
    <categories>
      
      <category>Echarts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
      <tag>Echarts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue本地模拟服务器请求mock数据</title>
    <link href="/2020/05/26/vue%E6%9C%AC%E5%9C%B0%E6%A8%A1%E6%8B%9F%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%B7%E6%B1%82mock%E6%95%B0%E6%8D%AE/"/>
    <url>/2020/05/26/vue%E6%9C%AC%E5%9C%B0%E6%A8%A1%E6%8B%9F%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%B7%E6%B1%82mock%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><ul><li>1、mockjs本地开发的时候用还好，mock数据需要生产时候用就不大行了</li><li>2、mock的数据通过<strong>module.exports</strong>、<strong>export</strong>实现的时候，<strong>npm run build</strong> 生产打包的时候，这些假数据会打包进app.js文件里面，导致文件大、首屏渲染慢；而且，在js文件里面mock的数据量超过webpack限制的时候，打包会失败</li><li>3、远程mock数据的就不需要了。像 <a href="https://github.com/ymfe/yapi">YApi</a>、<a href="https://github.com/NEIAPI/nei">网易NEI</a></li></ul><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ul><li>1、做演示项目的时候，数据需要完全本地化实现</li><li>2、做演示项目的时候，要求数据可供业务人员修改</li><li>3、mock数据量1w+的时候（因为项目用到的数据有6w+，十几M的文件，需要用到此方法了）</li><li>4、做的项目，需要前端人员先定义接口数据，后台人员配合传。这时候定义好的数据格式直接扔给后台人员就行了，特别是一些“查”，没有“增删改”的项目，前端写好后，基本不需要怎么修改了，挺方便的。</li><li>5、基于vue2 cli3项目</li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p><strong>vue cli3</strong> 的项目，打生产包的时候，<font color="#dd001b">public</font>文件夹里面的文件，是不经webpack编译，直接复制到 <strong>publicPath</strong>设置的目录下的，开发时用到的json数据、图片等资源文件，可以放到 <font color="#dd001b">public</font>目录里面。</p><h3 id="mock资源"><a href="#mock资源" class="headerlink" title="mock资源"></a>mock资源</h3><p>如下，准备了一张图片和一个json文件</p><blockquote><p><a href="https://github.com/liyoro/vue-skill/blob/main/public/data/table.json">table.json</a>，<br><a href="https://github.com/liyoro/vue-skill/blob/main/public/images/cat.png">cat.png</a></p></blockquote><figure class="highlight 1c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">|-- src</span><br><span class="hljs-string">|-- public</span><br>    <span class="hljs-string">|-- data</span><br>        <span class="hljs-string">|-- table.json</span><br>    <span class="hljs-string">|-- images</span><br>        <span class="hljs-string">|-- cat.png</span><br><br></code></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>涉及的文件如下（具体参考<strong>代码</strong>）：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">|-- src</span><br>    <span class="hljs-string">|-- .env.development    // 开发环境配置，主要是配置服务器地址</span><br>    <span class="hljs-string">|-- .env.production        // 生产环境配置，主要是配置服务器地址</span><br>    <span class="hljs-string">|-- settings.js    // 一些全局配置，把publicPath的值设置在这里</span><br>    <span class="hljs-string">|-- utils</span><br>        <span class="hljs-string">|-- mock-request.js    // axios请求封装</span><br>    <span class="hljs-string">|-- api</span><br>        <span class="hljs-string">|-- table.js    // 获取table.json数据的请求封装</span><br>    <span class="hljs-string">|-- views</span><br>        <span class="hljs-string">|-- mockDataTest    // 用来显示请求结果</span><br>            <span class="hljs-string">|-- index.vue</span><br>            <span class="hljs-string">|-- index.scss</span><br>            <span class="hljs-string">|-- index.js</span><br><span class="hljs-string">|-- public</span><br>    <span class="hljs-string">|-- data</span><br>        <span class="hljs-string">|-- table.json</span><br>    <span class="hljs-string">|-- images</span><br>        <span class="hljs-string">|-- cat.png</span><br><span class="hljs-string">|-- vue.config.js    </span><br></code></pre></td></tr></table></figure><h4 id="vue-config-js-settings-js"><a href="#vue-config-js-settings-js" class="headerlink" title="vue.config.js + settings.js"></a>vue.config.js + settings.js</h4><p>先配置下访问公共路径，例如，想在访问的时候地址加上<strong>dist</strong>路径，可以在<strong>vue.config.js</strong>如下配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> = &#123;<br>  publicPath: process.env.NODE_ENV === <span class="hljs-string">&#x27;production&#x27;</span> ? <span class="hljs-string">&#x27;/&#x27;</span> : <span class="hljs-string">&#x27;/dist&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>为方便调用，<font color="#dd001b">记得</font>这里要和<strong>settings.js</strong>里面的publicPath同步修改。</p><h4 id="env-development-env-production"><a href="#env-development-env-production" class="headerlink" title=".env.development +  .env.production"></a>.env.development +  .env.production</h4><p>这里主要是配置下部署的服务器的地址，例如，开发时，本地访问的地址是**<a href="http://localhost:8081/**%EF%BC%8C%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%8C%E5%AD%98%E6%94%BE%E6%AD%A4%E5%9C%B0%E5%9D%80%EF%BC%8C%E5%90%8D%E5%AD%97%E9%9A%8F%E6%84%8F">http://localhost:8081/**，定义一个参数，存放此地址，名字随意</a></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">VUE_APP_MOCK_URL</span> = <span class="hljs-string">&#x27;http://localhost:8081/&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="mock-request-js"><a href="#mock-request-js" class="headerlink" title="mock-request.js"></a>mock-request.js</h4><p>这里主要是配置下<strong>axios</strong>的<font color="#47b1ff">baseURL</font>，直接读取<font color="#47b1ff">.env.development or  .env.production</font>里面配置的服务器地址就行，例如，</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">baseURL: process.env.VUE_APP_MOCK_URL<br></code></pre></td></tr></table></figure><p>这里会自动根据命令，读取不同环境配置的服务器地址</p><h4 id="table-js"><a href="#table-js" class="headerlink" title="table.js"></a>table.js</h4><p>这里是服务器请求相关的，**.json**文件的数据怎么请求获取，如下所示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> mrequest <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/mock-request&#x27;</span><br><span class="hljs-keyword">import</span> defaultSettings <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/settings&#x27;</span><br><span class="hljs-keyword">const</span> &#123; publicPath &#125; = defaultSettings<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">tableData</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">mrequest</span>(&#123;<br>    <span class="hljs-attr">url</span>: publicPath + <span class="hljs-string">`/data/table.json`</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span><br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="mockDataTest"><a href="#mockDataTest" class="headerlink" title="mockDataTest"></a>mockDataTest</h4><p>这里主要是演示效果</p><ul><li>1、调用接口，在界面上显示<strong>table.json</strong>的数据</li><li>2、显示放的图片（也可以是其他资源，例如音乐、视频）</li></ul><p>具体看代码了</p><p>效果如下</p><p><img src="/img/Snip20210811_53.png"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://github.com/liyoro/vue-skill">代码</a>，参考</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>简单的实现了不用依赖后台接口的mock数据请求。数据都存放在<font color="#dd001b">.json</font>文件里面。这些放在<strong>public</strong>文件夹的文件，都不参与编译，方便修改和替换。打包生产后，可以直接放静态服务器运行。</p><p>以上，因为一个演示平台需要，数据、图片、视频都有频繁修改替换的可能，所以采用如此方式实现。</p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
      <tag>mock</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue文件，分离样式模块和业务处理模块</title>
    <link href="/2020/05/24/vue%E6%96%87%E4%BB%B6%EF%BC%8C%E5%88%86%E7%A6%BB%E6%A0%B7%E5%BC%8F%E6%A8%A1%E5%9D%97%E5%92%8C%E4%B8%9A%E5%8A%A1%E5%A4%84%E7%90%86%E6%A8%A1%E5%9D%97/"/>
    <url>/2020/05/24/vue%E6%96%87%E4%BB%B6%EF%BC%8C%E5%88%86%E7%A6%BB%E6%A0%B7%E5%BC%8F%E6%A8%A1%E5%9D%97%E5%92%8C%E4%B8%9A%E5%8A%A1%E5%A4%84%E7%90%86%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ul><li>1、这只是我的编程习惯，个人喜欢css、js代码独立放一个文件里面</li><li>2、写复杂界面的时候，界面、样式、业务代码都放.vue文件里面，代码量很大，几千上万行的，难受，割了吧</li><li>3、基于vue cli3项目</li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>挺简单的，就是利用下ES6的<strong>import</strong>和<strong>export</strong></p><p>例如<font color="#47b1ff">mockDataTest.vue</font>文件，在views目录下新建一个<font color="#47b1ff">mockDataTest</font>目录，目录里新建<strong>index.vue</strong>（界面主文件）、<strong>index.scss</strong>（界面样式代码）、<strong>index.js</strong>（业务js代码），结构如下：</p><figure class="highlight 1c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">|-- src</span><br>    <span class="hljs-string">|-- views</span><br>        <span class="hljs-string">|-- mockDataTest</span><br>            <span class="hljs-string">|-- index.vue</span><br>            <span class="hljs-string">|-- index.scss</span><br>            <span class="hljs-string">|-- index.js</span><br><br></code></pre></td></tr></table></figure><h3 id="index-vue-基础代码"><a href="#index-vue-基础代码" class="headerlink" title="index.vue 基础代码"></a>index.vue 基础代码</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-comment">&lt;!--界面代码--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mockDataTestView&quot;</span>&gt;</span></span><br><span class="language-xml">    mockDataTestView</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!--这里引入分离的业务js代码--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> indexjs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./index.js&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> </span></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">  ...indexjs,</span><br><span class="hljs-template-variable">&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!--这里引入分离的界面样式代码--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-keyword">@import</span> <span class="hljs-string">&#x27;./index.scss&#x27;</span>;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><h3 id="index-scss-基础代码"><a href="#index-scss-基础代码" class="headerlink" title="index.scss 基础代码"></a>index.scss 基础代码</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.mockDataTestView</span> &#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="index-js-基础代码"><a href="#index-js-基础代码" class="headerlink" title="index.js 基础代码"></a>index.js 基础代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;mockDataTestView&#x27;</span>,<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br><br>    &#125;<br>  &#125;,<br>  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>  &#125;,<br>  <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;&#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>  &#125;,<br>  <span class="hljs-attr">watch</span>: &#123;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>纯粹为了让一个文件里面代码量尽量少而已，便于阅读、编辑</p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>上述是针对vue2、js、scss的方式，vue3、typescript也是可以的</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>没什么好看的，上面的够了。</p><p><a href="https://github.com/liyoro/vue-skill">代码</a>，参考 <strong>views</strong> 里面的 <strong>mockDataTest</strong></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>访问github、npm工具推荐</title>
    <link href="/2020/05/23/%E8%AE%BF%E9%97%AEgithub%E3%80%81npm%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/"/>
    <url>/2020/05/23/%E8%AE%BF%E9%97%AEgithub%E3%80%81npm%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/</url>
    
    <content type="html"><![CDATA[<p>github和npm，这2东西，现代开发是必不可少的了，特别是前端开发。</p><p>访问github、npm等地址时，偶尔会失败，或者超级卡，这个工具挺好的，能用。</p><p>直接去官网看看吧 <a href="https://gitee.com/docmirror/dev-sidecar">dev-sidecar</a></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分享</tag>
      
      <tag>工具</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端调试，本地服务器推荐</title>
    <link href="/2020/05/22/%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%EF%BC%8C%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A8%E8%8D%90/"/>
    <url>/2020/05/22/%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%EF%BC%8C%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A8%E8%8D%90/</url>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>前端开发的时候，有时候需要服务器部署前端页面、打包后的代码调试。</p><h3 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h3><ul><li>1、开发的小程序用的简单页面，需要微信打开真机查看下效果，这时候本机部署一个本地服务器，然后手机连接电脑的共享网络，就可以访问部署好的页面或资源了。</li><li>2、开发的项目需要模拟真实服务器交互。Mock数据、加载图片资源、视频资源等</li><li>3、前端工程化项目，打包后的生产代码，可以本地部署查看下优化效果、webpack设置效果。Vue项目中的路由是否异步加载、js和css是否有压缩、打印和警告是否去除干净了、过大的js文件是否拆分了……</li><li>4、发布生产前，用PageSpeed或者LightHouse等工具检测下项目有哪些地方是需要优化的。</li></ul><h2 id="适用领域"><a href="#适用领域" class="headerlink" title="适用领域"></a>适用领域</h2><ul><li>1、本文方法仅供Mac使用</li><li>2、仅供前端开发人员本地调试优化使用</li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="1、Apache"><a href="#1、Apache" class="headerlink" title="1、Apache"></a>1、Apache</h3><p><a href="https://liyoro.com/2020/05/20/Mac%E8%87%AA%E5%B8%A6Apache%E4%BD%BF%E7%94%A8/">Mac自带Apache使用</a></p><h3 id="2、Nginx"><a href="#2、Nginx" class="headerlink" title="2、Nginx"></a>2、Nginx</h3><p><a href="https://liyoro.com/2020/05/20/Mac%E4%BD%BF%E7%94%A8Nginx/">Mac使用Nginx</a></p><h3 id="3、MAMP"><a href="#3、MAMP" class="headerlink" title="3、MAMP"></a>3、MAMP</h3><p><a href="https://www.mamp.info/en/mac/">MAMP</a> 是一款用于Web开发的本地服务器环境的工具，在mac或者windows机器上轻松安装和管理开发环境，有Apache，Nginx，Redis，Memcached，Python，Perl，Ruby，PHP和MySQL，可选高速缓存：APC，eAccelerator，XCache和OPcache。</p><p>这个是真挺强大和方便简单的。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
      <tag>前端</tag>
      
      <tag>服务器</tag>
      
      <tag>Apache</tag>
      
      <tag>MAMP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac使用Nginx</title>
    <link href="/2020/05/21/Mac%E4%BD%BF%E7%94%A8Nginx/"/>
    <url>/2020/05/21/Mac%E4%BD%BF%E7%94%A8Nginx/</url>
    
    <content type="html"><![CDATA[<p>Mac环境下，一般用Homebrew安装nginx，如果本机已安装，调到步骤二，没有的话，从步骤一开始。</p><h2 id="一、安装Homebrew"><a href="#一、安装Homebrew" class="headerlink" title="一、安装Homebrew"></a>一、安装Homebrew</h2><p><a href="https://brew.sh/">Homebrew</a>是mac的包管理器，仅需执行相应的命令,就能下载安装需要的软件包，很方便。</p><p>命令终端输入以下命令安装brew</p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/bin/</span>bash -c <span class="hljs-string">&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span><br></code></pre></td></tr></table></figure><p>或者用中科大的镜像安装</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/ruby -e &quot;$(curl -fsSL https:/</span><span class="hljs-regexp">/cdn.jsdelivr.net/g</span>h<span class="hljs-regexp">/ineo6/</span>homebrew-install/install)<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><h2 id="二、安装nginx"><a href="#二、安装nginx" class="headerlink" title="二、安装nginx"></a>二、安装nginx</h2><p>命令终端输入以下命令</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>nginx <br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs applescript">The default port has been <span class="hljs-keyword">set</span> <span class="hljs-keyword">in</span> /usr/<span class="hljs-keyword">local</span>/etc/nginx/nginx.conf <span class="hljs-keyword">to</span> <span class="hljs-number">8080</span> so <span class="hljs-keyword">that</span><br>nginx can <span class="hljs-built_in">run</span> <span class="hljs-keyword">without</span> sudo.<br><br>nginx will load all files <span class="hljs-keyword">in</span> /usr/<span class="hljs-keyword">local</span>/etc/nginx/servers/.<br><br>To have launchd start nginx now <span class="hljs-keyword">and</span> restart <span class="hljs-keyword">at</span> login:<br>  brew services start nginx<br>Or, <span class="hljs-keyword">if</span> you don&#x27;t want/need a background service you can just <span class="hljs-built_in">run</span>:<br>  nginx<br></code></pre></td></tr></table></figure><p>8080端口已经被Mac下的Apache服务器默认占用了，所以修改下nginx的端口。</p><p>在命令终端输入（我用的是vi，看个人喜欢了）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/etc/</span>nginx/nginx.conf<br></code></pre></td></tr></table></figure><p>找到8080端口的位置，修改下，例如改成8089。</p><p>验证下安装结果</p><p>正常操作用以下命令</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">brew services <span class="hljs-literal">start</span> nginx<br></code></pre></td></tr></table></figure><p>修改过nginx配置后用以下命令</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">brew services restart nginx</span><br></code></pre></td></tr></table></figure><p>浏览器访问<a href="http://localhost:8089/">http://localhost:8089</a>，看到以下页面，说明安装nginx成功了。</p><p><img src="/img/Snip20210730_38.png"></p><h2 id="三、部署项目"><a href="#三、部署项目" class="headerlink" title="三、部署项目"></a>三、部署项目</h2><p>默认网站目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/var/</span>www<br></code></pre></td></tr></table></figure><p>通过浏览器，可以访问部署的文件。</p><p>例如：使用<a href="https://blog.csdn.net/liyoro/article/details/119222939">如何快速开发一个响应式移动端页面</a>里面的<a href="https://github.com/liyoro/h5flexible">代码</a>，把<font color="#dd001b">index.html</font>文件和<font color="#dd001b">static</font>文件夹直接复制进<font color="#dd001b">/usr/local/var/www</font>目录下面。</p><p>浏览器访问<a href="http://localhost:8089/index.html">http://localhost:8089/index.html</a>就可以看到页面效果了。<br>（也可以通过<font color="#dd001b">http://本机ip:8089/index.html</font>访问，方便同个网络下别的机器访问测试）</p><p><img src="/img/Snip20210730_37.png"></p><p>这只是Nginx的简单使用。</p><p>以上，在Mac系统下可行。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
      <tag>前端</tag>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac自带Apache使用</title>
    <link href="/2020/05/20/Mac%E8%87%AA%E5%B8%A6Apache%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/05/20/Mac%E8%87%AA%E5%B8%A6Apache%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>苹果系统本身默认就安装了一个Aapche服务器。</p><h2 id="Apache常用命令"><a href="#Apache常用命令" class="headerlink" title="Apache常用命令"></a>Apache常用命令</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs crmsh">sudo apachectl <span class="hljs-literal">start</span>  <span class="hljs-comment">#开启</span><br><br>sudo apachectl <span class="hljs-literal">stop</span>  <span class="hljs-comment">#关闭</span><br><br>sudo apachectl restart  <span class="hljs-comment">#重启</span><br></code></pre></td></tr></table></figure><h2 id="默认网站目录"><a href="#默认网站目录" class="headerlink" title="默认网站目录"></a>默认网站目录</h2><p>默认的Apache的文件的根目录在/Library/WebServer/Documents</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>服务器启动后，直接把文件放到/Library/WebServer/Documents目录下面，就可以访问了。</p><p>例如：使用<a href="https://blog.csdn.net/liyoro/article/details/119222939">如何快速开发一个响应式移动端页面</a>里面的<a href="https://github.com/liyoro/h5flexible">代码</a>，把<font color="#dd001b">index.html</font>文件和<font color="#dd001b">static</font>文件夹直接复制进Documents目录下面。</p><p>浏览器访问<a href="http://127.0.0.1/index.html">http://127.0.0.1/index.html</a>就可以看到页面效果了。<br>（也可以通过<font color="#dd001b">http://本机ip/index.html</font>访问，方便同个网络下别的机器访问测试）</p><p><img src="/img/Snip20210730_37.png"></p><p>这只是Apache的简单使用，至于修改配置之类的，比较少用到了。前端人员其实不用太关注。顶多会出现<a href="https://blog.csdn.net/liyoro/article/details/106652585">Vue history模式下子页面刷新404问题</a>。</p><p>Apache的配置文件在/etc/apache2/httpd.conf，要记住！修改后需要重启服务器！</p><p>以上，在Mac系统下可行。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>服务器</tag>
      
      <tag>Apache</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何快速开发一个响应式移动端页面</title>
    <link href="/2020/05/19/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E5%93%8D%E5%BA%94%E5%BC%8F%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B5%E9%9D%A2/"/>
    <url>/2020/05/19/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E5%93%8D%E5%BA%94%E5%BC%8F%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B5%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="适用领域"><a href="#适用领域" class="headerlink" title="适用领域"></a>适用领域</h2><ul><li>1、非工程化项目（不需要webpack之类的打包）</li><li>2、html+css页面数少的项目（例如：app下载页面、抽奖活动页面）</li><li>3、其实pc端页面也适用的，但用的少（例如：大屏数据可视化页面）</li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>主要是用淘宝的flexible.js配合<a href="https://lanhuapp.com/">蓝湖</a>的原型设计图，达到快速开发的目的。</p><p>flexible可以根据不同的页面width给网页中html跟节点设置不同的font-size，配合rem可实现响应式页面。</p><p>flexible默认是750px的设计页面，基准值是7.5rem。这个基准值很关键，设计稿所有css换算，都和这个基准值有关。</p><p><font color=#DC4638>页面动态font-size值=设计稿宽度/基准值rem宽度</font>。</p><p>蓝湖可查看元素标注，自动生成CSS、iOS和Android代码。可以通过设置蓝湖的cssRem，自动转换所有元素的rem值，开发中很方便。</p><p>例如：设计稿宽度是375px的，页面动态font-size的值=375/7.5=50。如下设置，点击确定就行。</p><p><img src="/img/Snip20210729_34.png"></p><p>以上设置后，点击蓝湖中设计稿的元素，可以查看相关css代码，直接复制就可以使用。开发少量页面时，真的好快、好方便！</p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>做了个小demo，是根据375px的设计稿实现的，效果如下</p><p><img src="/img/Snip20210729_36.png"></p><p><a href="https://github.com/liyoro/h5flexible">查看代码</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>web</tag>
      
      <tag>css</tag>
      
      <tag>html</tag>
      
      <tag>响应式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue history模式下子页面刷新404问题</title>
    <link href="/2020/05/18/Vue-history%E6%A8%A1%E5%BC%8F%E4%B8%8B%E5%AD%90%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0404%E9%97%AE%E9%A2%98/"/>
    <url>/2020/05/18/Vue-history%E6%A8%A1%E5%BC%8F%E4%B8%8B%E5%AD%90%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0404%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>Vue history模式下，开发运行的时候刷新页面没问题，但是部署在公司服务器的时候，子页面刷新会有404问题。<br>在Mac自带Apache下尝试了下，确实会出现，解决的过程如下：<br>(没在别的服务器部署过，不过也是给对应服务器加下配置就可以解决了)</p><h2 id="Mac自带Apache基本操作"><a href="#Mac自带Apache基本操作" class="headerlink" title="Mac自带Apache基本操作"></a>Mac自带Apache基本操作</h2><p>查看apache版本</p><blockquote><p>sudo apachectl -v</p></blockquote><p>启动apache</p><blockquote><p>sudo apachectl start</p></blockquote><p>重启apache</p><blockquote><p>sudo apachectl restart</p></blockquote><p>备份原来的文件</p><blockquote><p>sudo cp /etc/apache2/httpd.conf /etc/apache2/httpd.conf.backup</p></blockquote><p>修改主配置文件</p><blockquote><p>sudo vi /etc/apache2/httpd.conf</p></blockquote><p>以上要注意的是，一定要加<font color="red">sudo</font>，使用管理员权限修改apache的配置文件</p><h2 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h2><p>在web项目根目录下创建 <font color="blue">.htaccess</font>，在文件中添加如下配置：</p><figure class="highlight apache"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;IfModule mod_rewrite.c&gt;</span><br>  <span class="hljs-attribute">RewriteEngine</span> <span class="hljs-literal">On</span><br>  <span class="hljs-attribute">RewriteBase</span> /<br>  <span class="hljs-attribute">RewriteRule</span> ^index\.html$ -<span class="hljs-meta"> [L]</span><br>  <span class="hljs-attribute">RewriteCond</span> <span class="hljs-variable">%&#123;REQUEST_FILENAME&#125;</span> !-f<br>  <span class="hljs-attribute">RewriteCond</span> <span class="hljs-variable">%&#123;REQUEST_FILENAME&#125;</span> !-d<br>  <span class="hljs-attribute">RewriteRule</span> . /dist/index.html<span class="hljs-meta"> [L]</span><br><span class="hljs-section">&lt;/IfModule&gt;</span><br></code></pre></td></tr></table></figure><ul><li>因为我打包Vue项目时设定的公共路径是 <font color="blue">/dist/</font>，所以上面的RewriteRule要带上，如果公共路径是 <font color="blue">/</font> ，则不需要加上了</li><li><font color="blue">RewriteRule . /dist/index.html [L]</font> 里面的 <font color="red">.</font> 和 <font color="red">/dist/index.html</font>有空格，不要去除</li><li><a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html">官网</a> 有提供Apache参考配置，但本机测试不可用，有兴趣可以尝试</li></ul><h2 id="配置Apache"><a href="#配置Apache" class="headerlink" title="配置Apache"></a>配置Apache</h2><blockquote><p>sudo vi /etc/apache2/httpd.conf</p></blockquote><ul><li>找到 <code>&lt;Directory &quot;/Library/WebServer/Documents&quot;&gt;</code>里面的<code>AllowOverride none</code>，修改为<code>AllowOverride All</code></li><li>找到<code>LoadModule rewrite_module</code>，将前面的“#”号删除</li></ul><blockquote><p>sudo apachectl restart</p></blockquote><p>以上，本机测试可用</p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Apache</tag>
      
      <tag>Vue</tag>
      
      <tag>Mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue自定义均衡器样式柱图</title>
    <link href="/2020/05/17/Vue%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9D%87%E8%A1%A1%E5%99%A8%E6%A0%B7%E5%BC%8F%E6%9F%B1%E5%9B%BE/"/>
    <url>/2020/05/17/Vue%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9D%87%E8%A1%A1%E5%99%A8%E6%A0%B7%E5%BC%8F%E6%9F%B1%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p>看到这个奇怪的展示柱图的时候，呵呵~~~</p><p>先上效果图</p><p><img src="/img/Snip20200601_17_min.png"></p><p>原理是通过flex布局使小横杆垂直叠加，一个做背景，一个做活动项。2个不同颜色的重合，就可以形成以上的效果。</p><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>js里引入组件</p><figure class="highlight clean"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> equalizerbar <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/equalizerbar&#x27;</span><br></code></pre></td></tr></table></figure><p>components里面声明下</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">components</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123;</span><br>     <span class="hljs-attribute">&#x27;equalizer-bar&#x27;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">equalizerbar</span><br>&#125;<br></code></pre></td></tr></table></figure><p>vue文件里面使用</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;equalizer-bar<br>    <span class="hljs-symbol">:max=<span class="hljs-string">&quot;11&quot;</span></span><br>    <span class="hljs-symbol">:active=<span class="hljs-string">&quot;6&quot;</span></span><br>    <span class="hljs-symbol">:equalizerHeight=<span class="hljs-string">&quot;20&quot;</span></span><br>    activecolor=<span class="hljs-string">&quot;#fea313&quot;</span><br>    class=<span class="hljs-string">&quot;eb&quot;</span><br>&gt;&lt;/equalizer-bar&gt;<br></code></pre></td></tr></table></figure><p>组件开放了很多自定义属性，具体看代码了，如上</p><ul><li>max：最大小横杆数量</li><li>active：活动小横杆数量</li><li>equalizerHeight：小横杆高度</li><li>normalcolor：背景小横杆颜色</li><li>activecolor：活动小横杆颜色</li></ul><p>以上都是可以data()里面定义，然后动态控制的。</p><h2 id="工程代码"><a href="#工程代码" class="headerlink" title="工程代码"></a>工程代码</h2><p>整个项目的代码在下面地址 </p><p><a href="https://github.com/liyoro/bigscreen">大屏开发框架工程代码</a></p><blockquote><p>详见目录 <font color=#508FF2>components</font> — <font color=#508FF2>equalizerbar.vue</font> </p></blockquote><blockquote><p>代码使用例子在 <font color=#508FF2>views</font> — <font color=#508FF2>Home</font> 页面</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>图表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue自定义svg百分比圆环组件</title>
    <link href="/2020/05/16/Vue%E8%87%AA%E5%AE%9A%E4%B9%89svg%E7%99%BE%E5%88%86%E6%AF%94%E5%9C%86%E7%8E%AF%E7%BB%84%E4%BB%B6/"/>
    <url>/2020/05/16/Vue%E8%87%AA%E5%AE%9A%E4%B9%89svg%E7%99%BE%E5%88%86%E6%AF%94%E5%9C%86%E7%8E%AF%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>不熟悉svg，看文档做的这个东西。</p><blockquote><p><a href="https://www.runoob.com/svg/svg-circle.html">菜鸟教程</a></p></blockquote><p>先上效果图</p><p><img src="/img/Snip20200601_15_min.png"></p><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>js里引入组件</p><figure class="highlight clean"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> svgcircle <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/svgcircle&#x27;</span><br></code></pre></td></tr></table></figure><p>components里面声明下</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">components</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123;</span><br>     <span class="hljs-attribute">&#x27;svgcircle&#x27;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">svgcircle,</span><br>&#125;<br></code></pre></td></tr></table></figure><p>vue文件里面使用</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs processing">&lt;svgcircle<br>    rate=<span class="hljs-string">&quot;0.6&quot;</span><br>    :<span class="hljs-built_in">size</span>=<span class="hljs-string">&quot;svgcircleSize&quot;</span><br>    :<span class="hljs-built_in">text</span>=<span class="hljs-string">&quot;svgcircleText&quot;</span><br>    :<span class="hljs-built_in">textSize</span>=<span class="hljs-string">&quot;svgcircleTextSize&quot;</span><br>    <span class="hljs-built_in">stroke</span>-<span class="hljs-built_in">width</span>=<span class="hljs-string">&quot;6&quot;</span><br>    strokeBgColor=<span class="hljs-string">&quot;rgba(255, 160, 0, 0.5)&quot;</span><br>    <span class="hljs-built_in">stroke</span>-<span class="hljs-type">color</span>=<span class="hljs-string">&quot;#FFA000&quot;</span><br>&gt;&lt;/svgcircle&gt;<br></code></pre></td></tr></table></figure><p>组件开放了很多自定义属性，具体看代码了，如上，svgcircleSize、svgcircleText、svgcircleTextSize，都是data()里面定义的，其中svgcircleSize是圆环的半径，svgcircleText是圆环中间文字，svgcircleTextSize是中间文字的大小。</p><p>这个组件是为了大屏里面使用的，为了响应屏幕尺寸的变化，写了个方法，动态修改圆环的半径、中间文字大小，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 动态调整圆环里的文字，根据自己需求定义，1366是设计图的宽</span><br><span class="hljs-title function_">resizeCircle</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">screenWidth</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientWidth</span><br>    <span class="hljs-keyword">let</span> screenWidth = <span class="hljs-variable language_">window</span>.<span class="hljs-property">screenWidth</span><br>    <span class="hljs-keyword">let</span> tempSize = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>((<span class="hljs-variable language_">this</span>.<span class="hljs-property">svgcircleSize</span> / <span class="hljs-number">1366</span>) * screenWidth)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;svgcircleSize:&#x27;</span>, screenWidth, tempSize)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">svgcircleSize</span> = tempSize<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">svgcircleTextSize</span> = tempSize * <span class="hljs-number">0.6</span><br> &#125;,<br><span class="hljs-title function_">init</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> vm = <span class="hljs-variable language_">this</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>         <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>             vm.<span class="hljs-title function_">resizeCircle</span>()<br>         &#125;)<br>    &#125;, <span class="hljs-number">50</span>)<br>&#125;,<br><span class="hljs-title function_">destroyed</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">init</span>, <span class="hljs-number">20</span>)<br>&#125;,<br></code></pre></td></tr></table></figure><p>当然，自适应这些可以直接组件里面写好的，有空再弄了~~~</p><h2 id="工程代码"><a href="#工程代码" class="headerlink" title="工程代码"></a>工程代码</h2><p>整个项目的代码在下面地址 </p><p><a href="https://github.com/liyoro/bigscreen">大屏开发框架工程代码</a></p><blockquote><p>详见目录 <font color=#508FF2>components</font> — <font color=#508FF2>svgcircle.vue</font> </p></blockquote><blockquote><p>代码使用例子在 <font color=#508FF2>views</font> — <font color=#508FF2>Home</font> 页面</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>Element</tag>
      
      <tag>图表</tag>
      
      <tag>SVG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端大屏展示框架搭建（四）</title>
    <link href="/2020/05/14/%E5%89%8D%E7%AB%AF%E5%A4%A7%E5%B1%8F%E5%B1%95%E7%A4%BA%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <url>/2020/05/14/%E5%89%8D%E7%AB%AF%E5%A4%A7%E5%B1%8F%E5%B1%95%E7%A4%BA%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>和rem类似。通过一个px转vw、vh的换算方法，实现动态响应式大屏页面。有点类似iOS的autoLayout了。</p><h2 id="换算方法"><a href="#换算方法" class="headerlink" title="换算方法"></a>换算方法</h2><p>具体要根据设计图定，宽高值而已</p><figure class="highlight scss"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs scss"><span class="hljs-variable">$ui-width</span>: <span class="hljs-number">1920</span>; <span class="hljs-comment">//设计图的基准宽</span><br><span class="hljs-variable">$ui-height</span>: <span class="hljs-number">1092</span>; <span class="hljs-comment">//设计图的基准高</span><br><br><span class="hljs-keyword">@function</span> vw(<span class="hljs-variable">$px</span>) &#123;<br>  <span class="hljs-keyword">@return</span> <span class="hljs-variable">$px</span> / <span class="hljs-variable">$ui-width</span> * <span class="hljs-number">100vw</span>;<br>&#125;<br><br><span class="hljs-keyword">@function</span> vh(<span class="hljs-variable">$px</span>) &#123;<br>  <span class="hljs-keyword">@return</span> <span class="hljs-variable">$px</span> / <span class="hljs-variable">$ui-height</span> * <span class="hljs-number">100vh</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-class">.app-head</span> &#123;<br>  <span class="hljs-attribute">height</span>: vh(<span class="hljs-variable">$headHeight</span>);<br>  <span class="hljs-attribute">line-height</span>: vh(<span class="hljs-variable">$headHeight</span>);<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-variable">$headBg</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接在scss中调用vw、vh方法就行，这里有个地方要注意的，就是用到这2方法的地方，定义的变量后面不需要跟单位了，直接数字就行，例如上面的 <font color=#508FF2>$headHeight</font> ，写法如下就行：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$headHeight</span>: 72;</span><br></code></pre></td></tr></table></figure><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>每次都要引入vw、vh方法，就算封装在一个文件里面了，也需要在对应页面的scss里面引入</li><li>页面布局里所有的px都需要用vw、vh替换</li><li>支持IE10以上</li></ul><h2 id="工程代码"><a href="#工程代码" class="headerlink" title="工程代码"></a>工程代码</h2><p>整个项目的代码在下面地址，详见<font color=#508FF2> layout </font>里面的<font color=#508FF2> vwLayout </font></p><p><a href="https://github.com/liyoro/bigscreen">大屏开发框架工程代码</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VSCode</tag>
      
      <tag>Vue</tag>
      
      <tag>Element</tag>
      
      <tag>大屏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端大屏展示框架搭建（三）</title>
    <link href="/2020/05/13/%E5%89%8D%E7%AB%AF%E5%A4%A7%E5%B1%8F%E5%B1%95%E7%A4%BA%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2020/05/13/%E5%89%8D%E7%AB%AF%E5%A4%A7%E5%B1%8F%E5%B1%95%E7%A4%BA%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>等比缩放页面，是大屏开发里比较常用的方式了。一般设计图按大屏的尺寸设计，按尺寸开发，最后等比缩放。</p><p>大屏等比缩放，在layout.vue里面做控制。</p><blockquote><p>layout.vue</p></blockquote><p>主要是在 <font color=#508FF2>app-wrapper</font> 所在div进行scale。</p><figure class="highlight dust"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app-wrapper&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">        transformOrigin: &#x27;center top&#x27;,</span><br><span class="hljs-template-variable">        transform: `scale($&#123;scalseNum&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">,$</span></span></span><span class="hljs-template-variable">&#123;scalseNum&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">)`,</span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">        &#x27;-webkit-transform&#x27;: `scale($</span></span></span><span class="hljs-template-variable">&#123;scalseNum&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">,$</span></span></span><span class="hljs-template-variable">&#123;scalseNum&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">)`,</span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">        &#x27;-moz-transform&#x27;: `scale($</span></span></span><span class="hljs-template-variable">&#123;scalseNum&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">,$</span></span></span><span class="hljs-template-variable">&#123;scalseNum&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">)`,</span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">        &#x27;-o-transform&#x27;: `scale($</span></span></span><span class="hljs-template-variable">&#123;scalseNum&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">,$</span></span></span><span class="hljs-template-variable">&#123;scalseNum&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">)`,</span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">        &#x27;-ms-transform&#x27;: `scale($</span></span></span><span class="hljs-template-variable">&#123;scalseNum&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">,$</span></span></span><span class="hljs-template-variable">&#123;scalseNum&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">)`,</span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">      &#125;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">      <span class="hljs-comment">&lt;!-- 头部栏 --&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">app-head</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app-head</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-comment">&lt;!-- 内容栏 --&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">app-main</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>scale的比例按照实际屏幕宽与1366的比例计算，如果设计图是按照别的尺寸做的，例如 <font color=#259F3B>1920x1080</font>、<font color=#259F3B>3840*2160（4K）屏</font>等等，在下面代码的 <font color=#DC544B>resize_window</font> 方法设置对应宽度就行。</p><p>代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AppMain</span>, <span class="hljs-title class_">AppHead</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Layout&#x27;</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-title class_">AppMain</span>,</span><br><span class="language-javascript">    <span class="hljs-title class_">AppHead</span>,</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">scalseNum</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">//缩放比例</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">computed</span>: &#123;&#125;,</span><br><span class="language-javascript">  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-comment">//计算缩放比例</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">resize_window</span>()</span><br><span class="language-javascript">    <span class="hljs-comment">// 监听浏览器缩放，实时改变大屏宽高</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">resize_window</span>()</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-comment">//计算缩放比例</span></span><br><span class="language-javascript">    <span class="hljs-title function_">resize_window</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> w_width = <span class="hljs-title class_">Number</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientWidth</span> / <span class="hljs-number">1366</span>)</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">scalseNum</span> = w_width</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="工程代码"><a href="#工程代码" class="headerlink" title="工程代码"></a>工程代码</h2><p>整个项目的代码在下面地址，参考commit就懂过程了</p><p><a href="https://github.com/liyoro/bigscreen">大屏开发框架工程代码</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VSCode</tag>
      
      <tag>Vue</tag>
      
      <tag>Element</tag>
      
      <tag>大屏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端大屏展示框架搭建（二）</title>
    <link href="/2020/05/12/%E5%89%8D%E7%AB%AF%E5%A4%A7%E5%B1%8F%E5%B1%95%E7%A4%BA%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2020/05/12/%E5%89%8D%E7%AB%AF%E5%A4%A7%E5%B1%8F%E5%B1%95%E7%A4%BA%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>基于element-ui进行布局。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装运行依赖"><a href="#安装运行依赖" class="headerlink" title="安装运行依赖"></a>安装运行依赖</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">element-ui</span><br></code></pre></td></tr></table></figure><h3 id="安装开发依赖"><a href="#安装开发依赖" class="headerlink" title="安装开发依赖"></a>安装开发依赖</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">babel-plugin-component</span><br></code></pre></td></tr></table></figure><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">vue-<span class="hljs-keyword">cli</span>-<span class="hljs-keyword">plugin</span>-element<br></code></pre></td></tr></table></figure><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>项目的整体布局是共用的，通过在vue的路由里配置component为Layout复用，这个vue的官方文档有介绍。</p><p><img src="/img/Snip20200513_9.png"></p><p>如上图所示：</p><ul><li> 1、建立一个layout文件夹存放项目的共用布局</li><li> 2、工作需要，现需要一个上下两栏的布局，上面是工具栏</li><li> 3、下面是内容展示栏，工具栏内点击切换的页面，路由就在内容页内加载</li><li> 4、index.js是用来统筹引用布局用的组件的，2、3建的就是组件，如果需要用到别的布局组件，全都放这里，方便layout.vue引用（后面会在内容展示栏2边都分别再放一栏）</li><li> 5、供路由使用的Layout文件，整体布局所在</li><li> 6、复用布局的使用大概就标记6那样了</li></ul><p>采用element的Container布局容器作为页面的整体布局，这里是基于1366x768像素做大屏页面，然后对全屏页面进行等比例缩放。</p><blockquote><p>layout.vue</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app-wrapper&quot;</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 头部栏 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">app-head</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app-head</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 内容栏 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">app-main</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.app-wrapper</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">1366px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">768px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">transform-origin</span>: center top <span class="hljs-number">0px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">  <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">683px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>AppHead.vue</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app-head&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-keyword">@import</span> <span class="hljs-string">&#x27;~@/styles/variables.scss&#x27;</span>;</span><br><span class="language-css"><span class="hljs-selector-class">.app-head</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">  <span class="hljs-attribute">background-color</span>: $headBg;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>AppMain.vue</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app-main&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">transition</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;key&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-keyword">@import</span> <span class="hljs-string">&#x27;~@/styles/variables.scss&#x27;</span>;</span><br><span class="language-css"><span class="hljs-selector-class">.app-main</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">  <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">  <span class="hljs-attribute">top</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">  <span class="hljs-attribute">background-color</span>: $appBg;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样就得到了如下的布局了</p><p><img src="/img/Snip20200513_10.png"></p><p>这里基本就是基本的大屏展示框架了，然后为了适应大屏，需要对全屏页面等比例缩放，放到前端大屏展示框架搭建（三）介绍了，都是常用的方法。</p><h2 id="工程代码"><a href="#工程代码" class="headerlink" title="工程代码"></a>工程代码</h2><p>整个项目的代码在下面地址，参考commit就懂过程了</p><p><a href="https://github.com/liyoro/bigscreen">大屏开发框架工程代码</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VSCode</tag>
      
      <tag>Vue</tag>
      
      <tag>Element</tag>
      
      <tag>大屏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端大屏展示框架搭建（一）</title>
    <link href="/2020/05/11/%E5%89%8D%E7%AB%AF%E5%A4%A7%E5%B1%8F%E5%B1%95%E7%A4%BA%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2020/05/11/%E5%89%8D%E7%AB%AF%E5%A4%A7%E5%B1%8F%E5%B1%95%E7%A4%BA%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>项目开发很常用到，记录下搭建的过程。</p><h2 id="基于vue-cli3新建一个项目"><a href="#基于vue-cli3新建一个项目" class="headerlink" title="基于vue-cli3新建一个项目"></a>基于vue-cli3新建一个项目</h2><p>过程已经写过了~~~</p><h2 id="基于VS-Code的代码风格统一配置"><a href="#基于VS-Code的代码风格统一配置" class="headerlink" title="基于VS Code的代码风格统一配置"></a>基于VS Code的代码风格统一配置</h2><p>VS Code先安装这几个插件</p><figure class="highlight armasm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">Vetur</span>、ESLint、Prettier-<span class="hljs-meta">Code</span> formatter<br></code></pre></td></tr></table></figure><p>Beautify也挺好用的，不过和Prettier有冲突，放弃了~~</p><h3 id="配置settings-json"><a href="#配置settings-json" class="headerlink" title="配置settings.json"></a>配置settings.json</h3><p>这个可以全局配置，但是为了不影响导入项目时别人的设置，可以在当前项目的根路径里创建一个.vscode/settings.json文件，里面设置的配置只在当前项目生效。</p><p>我的配置如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;workbench.colorTheme&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Monokai&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;window.zoomLevel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;editor.fontSize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">14</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;editor.formatOnSave&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">//保存时eslint自动修复错误</span><br>    <span class="hljs-comment">//保存自动格式化</span><br>    <span class="hljs-attr">&quot;editor.codeActionsOnSave&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;source.fixAll.tslint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;source.fixAll.eslint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;prettier.singleQuote&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;prettier.eslintIntegration&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;prettier.tslintIntegration&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;vetur.format.defaultFormatter.js&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;none&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;vetur.format.defaultFormatter.html&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;js-beautify-html&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;[javascript]&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;editor.defaultFormatter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vscode.typescript-language-features&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;git.enableSmartCommit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="ESLint-和-Prettier-的冲突修复"><a href="#ESLint-和-Prettier-的冲突修复" class="headerlink" title="ESLint 和 Prettier 的冲突修复"></a>ESLint 和 Prettier 的冲突修复</h3><p>由于需要同时使用prettier和eslint，prettier的一些规则和eslint的一些规则可能存在冲突，如prettier字符串默认是用双引号而esLint定义的是单引号的，这样格式化之后就不符合ESLint规则了。</p><p>要解决冲突就需要在Prettier的规则配置里也配置上和ESLint一样的规则，直接覆盖掉</p><h4 id="配置-eslintrc-js"><a href="#配置-eslintrc-js" class="headerlink" title="配置.eslintrc.js"></a>配置.eslintrc.js</h4><p>在当前项目的根路径里创建一个.eslintrc.js文件，配置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> = &#123;<br>    root: <span class="hljs-literal">true</span>,<br>    env: &#123;<br>        node: <span class="hljs-literal">true</span><br>    &#125;,<br>    extends: [<span class="hljs-string">&#x27;plugin:vue/essential&#x27;</span>, <span class="hljs-string">&#x27;eslint:recommended&#x27;</span>],<br>    rules: &#123;<br>        <span class="hljs-string">&#x27;no-console&#x27;</span>: process.env.NODE_ENV === <span class="hljs-string">&#x27;production&#x27;</span> ? <span class="hljs-string">&#x27;error&#x27;</span> : <span class="hljs-string">&#x27;off&#x27;</span>,<br>        <span class="hljs-string">&#x27;no-debugger&#x27;</span>: process.env.NODE_ENV === <span class="hljs-string">&#x27;production&#x27;</span> ? <span class="hljs-string">&#x27;error&#x27;</span> : <span class="hljs-string">&#x27;off&#x27;</span>,<br>        <span class="hljs-comment">//强制使用单引号</span><br>        quotes: [<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-string">&#x27;single&#x27;</span>],<br>        <span class="hljs-comment">//强制不使用分号结尾</span><br>        semi: [<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-string">&#x27;never&#x27;</span>]<br>    &#125;,<br>    parserOptions: &#123;<br>        parser: <span class="hljs-string">&#x27;babel-eslint&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="配置prettier"><a href="#配置prettier" class="headerlink" title="配置prettier"></a>配置prettier</h4><p>有2种方式，一种是直接在当前项目的根路径里新建一个.prettierrc文件，然后配置如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-comment">//开启 eslint 支持</span><br>  <span class="hljs-attr">&quot;eslintIntegration&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">//使用单引号</span><br>  <span class="hljs-attr">&quot;singleQuote&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">//结尾不加分号</span><br>  <span class="hljs-attr">&quot;semi&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>上面的方式在我的工程里面有冲突，所以我采取第二种方式了，直接在VSCode的Preferences–&gt;Settings里面设置，配置如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//开启 eslint 支持</span><br><span class="hljs-attr">&quot;prettier.eslintIntegration&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br><span class="hljs-comment">//使用单引号</span><br><span class="hljs-attr">&quot;prettier.singleQuote&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br><span class="hljs-comment">//结尾不加分号</span><br><span class="hljs-attr">&quot;prettier.semi&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>这样就解决了，每次保存文件的时候，代码都会格式化一遍的。足够统一多人开发项目的代码风格了，强迫症患者的福音！</p><h2 id="工程代码"><a href="#工程代码" class="headerlink" title="工程代码"></a>工程代码</h2><p>整个项目的代码在下面地址，参考commit就懂过程了</p><p><a href="https://github.com/liyoro/bigscreen">大屏开发框架工程代码</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VSCode</tag>
      
      <tag>Vue</tag>
      
      <tag>Element</tag>
      
      <tag>大屏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于Mixin的小知识</title>
    <link href="/2020/05/09/%E5%85%B3%E4%BA%8EMixin%E7%9A%84%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    <url>/2020/05/09/%E5%85%B3%E4%BA%8EMixin%E7%9A%84%E5%B0%8F%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<ul><li><p>一些一直要复制、粘贴的data、methods、watch，可以单独抽出成一个单独的组件，供任何组件在mixins调用，实现共享可重用的代码</p></li><li><p>引用mixin的实例，可以通过this访问mixin里定义的data、methods，就像这些东西本来就是在当前组件声明一样</p></li><li><p> mixin生命周期mounted、created、update会优先于引用实例触发</p></li><li><p> 引用实例和mixin发生命名冲突，例如data里面定义的参数、methods里面定义的方法，引用实例本身的属性优先</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Coding.net+Hexo搭建个人博客</title>
    <link href="/2020/04/19/Coding-net-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2020/04/19/Coding-net-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Hexo博客的搭建详情见 <a href="/2020/04/19/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2">Hexo搭建个人博客</a></p></blockquote><p><a href="https://coding.net/">Coding.net</a> 是一个面向开发者的云端开发平台，提供 Git/SVN 代码托管、任务管理、在线 WebIDE、Cloud Studio、开发协作、文件管理、Wiki 管理、提供个人服务(免费)及企业服务。</p><p>因为喜欢Git，存代码很常用到。开始的时候，这里只是存放代码的地方，后来 <a href="https://coding.net/">Coding.net</a> 提供了静态网站托管服务，对广大想拥有自己博客的人来说，真的是好消息了！真的好用的忍不住推广！</p><h1 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h1><h2 id="1、新建项目"><a href="#1、新建项目" class="headerlink" title="1、新建项目"></a>1、新建项目</h2><p><img src="/img/Snip20200419_7.png"></p><p>不是团队合作的项目，选代码托管就行</p><p><img src="/img/Snip20200419_8.png"></p><p>根据个人喜好填写就行</p><p><img src="/img/Snip20200419_9.png"></p><h2 id="2、把代码提交到Git仓库"><a href="#2、把代码提交到Git仓库" class="headerlink" title="2、把代码提交到Git仓库"></a>2、把代码提交到Git仓库</h2><p><img src="/img/Snip20200419_10.png"></p><h2 id="3、开始设置"><a href="#3、开始设置" class="headerlink" title="3、开始设置"></a>3、开始设置</h2><p>项目的持续集成和持续部署功能默认是关闭的，点击项目设置–&gt;项目与成员–&gt;功能开关，开启这2功能</p><p><img src="/img/Snip20200419_11.png"></p><p>返回，点击持续部署–&gt;静态网站–&gt;立即发布静态网站</p><p><img src="/img/Snip20200419_14.png"></p><p><img src="/img/Snip20200419_16.png"></p><p>根据自己喜欢填写信息</p><p><img src="/img/Snip20200419_17.png"></p><h2 id="4、发布"><a href="#4、发布" class="headerlink" title="4、发布"></a>4、发布</h2><p>点击立即部署，等，部署完毕，部署记录里面会有绿标的。<br>然后点击访问地址，大功告成了！</p><p><img src="/img/Snip20200419_19.png"></p><h2 id="5、持续集成的配置"><a href="#5、持续集成的配置" class="headerlink" title="5、持续集成的配置"></a>5、持续集成的配置</h2><p>这个搞不搞都ok的。不搞，手动部署博客，搞，自动，每次提交代码，等就行。</p><p>点击持续集成–&gt;构建计划</p><p><img src="/img/Snip20200419_20.png"></p><p>我选的是默认的配置</p><p><img src="/img/Snip20200419_21.png"></p><p><img src="/img/Snip20200419_22.png"></p><p>这里是设置提交代码就自动部署的，看自己的喜好选择配置了</p><p><img src="/img/Snip20200419_23.png"></p><p>以上</p>]]></content>
    
    
    <categories>
      
      <category>分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分享</tag>
      
      <tag>Hexo</tag>
      
      <tag>Coding.net</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo搭建个人博客</title>
    <link href="/2020/04/19/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2020/04/19/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>互联网的很多东西，使用的最好方式，都是看文档。<br><a href="https://hexo.io/zh-cn/docs/">Hexo中文官网</a></p></blockquote><p>我用的是Mac电脑，简单记录下步骤</p><h2 id="1、全局安装Hexo"><a href="#1、全局安装Hexo" class="headerlink" title="1、全局安装Hexo"></a>1、全局安装Hexo</h2><p>Hexo的脚手架，本地运行博客，安装主题、插件等都靠它了，运行以下命令</p><figure class="highlight avrasm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><h2 id="2、开始建站"><a href="#2、开始建站" class="headerlink" title="2、开始建站"></a>2、开始建站</h2><p>选定存放代码的文件夹，运行以下命令，生成一个名为testBlog的文件夹，里面就是博客的代码，具体的配置、主题更换等，可以参考官网说明</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span> testBlog<br></code></pre></td></tr></table></figure><h2 id="3、本地运行博客"><a href="#3、本地运行博客" class="headerlink" title="3、本地运行博客"></a>3、本地运行博客</h2><p>进入到testBlog文件夹下，运行以下命令</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><p>初始的博客就长这样</p><p><img src="/img/Snip20200419_6.png"></p><h2 id="4、发布博客"><a href="#4、发布博客" class="headerlink" title="4、发布博客"></a>4、发布博客</h2><p>如果有自己的静态服务器，要发布，需要生成静态文件，运行以下命令</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br></code></pre></td></tr></table></figure><p>其实，现在有很多免费、好用、易用、免折腾的静态服务器了，不用像当年要买，还要从折腾到放弃。我最喜欢的是 <a href="https://coding.net/">coding.net</a>，自从腾讯当它爸爸后，真香！越来越好用了，还免费<del>。</del>！</p><p>Hexo用 <a href="https://coding.net/">coding.net</a> 部署，详情见 <a href="/2020/04/19/Coding-net-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/">Coding.net+Hexo搭建个人博客</a></p>]]></content>
    
    
    <categories>
      
      <category>分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分享</tag>
      
      <tag>Hexo</tag>
      
      <tag>Coding.net</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PageSpeed网页性能评估优化工具</title>
    <link href="/2020/04/11/PageSpeed%E7%BD%91%E9%A1%B5%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%BC%98%E5%8C%96%E5%B7%A5%E5%85%B7/"/>
    <url>/2020/04/11/PageSpeed%E7%BD%91%E9%A1%B5%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E4%BC%98%E5%8C%96%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h2><p>PageSpeed是Google提供的网页性能工具。它可以帮你测试网页在pc端和移动端上有什么性能问题，帮助开发人员进行性能优化。通过它可以发现平时应该注意许多性能方面的细节。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>打开Chrome网上应用店 -&gt; PageSpeed Insights(with PNaCI) -&gt; 添加至Chrome</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="（1）直接在Chrome的DevTools上运行"><a href="#（1）直接在Chrome的DevTools上运行" class="headerlink" title="（1）直接在Chrome的DevTools上运行"></a>（1）直接在Chrome的DevTools上运行</h3><p><img src="/img/Snip20200410_4.png"></p><h3 id="（2）直接在需要测试的页面上点击PageSpeed扩展工具"><a href="#（2）直接在需要测试的页面上点击PageSpeed扩展工具" class="headerlink" title="（2）直接在需要测试的页面上点击PageSpeed扩展工具"></a>（2）直接在需要测试的页面上点击PageSpeed扩展工具</h3><p><img src="/img/Snip20200410_2.png"></p><p>运行后，等待…然后会自动生成一个评估结果的html页面。还挺友好的，报告页面是中文的。</p><p>在评估页面里，可以看到它的性能数据、诊断结果、优化建议，开发人员可以根据这些来对网站进行优化。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lighthouse网页性能评估工具</title>
    <link href="/2020/04/11/Lighthouse%E7%BD%91%E9%A1%B5%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E5%B7%A5%E5%85%B7/"/>
    <url>/2020/04/11/Lighthouse%E7%BD%91%E9%A1%B5%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h2><p>Lighthouse用于分析web应用程序和web页面，收集关于开发人员最佳实践的现代性能指标和见解，让开发人员根据生成的评估页面，来进行网站优化和完善，提高用户体验。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>打开Chrome网上应用店 -&gt; Lighthouse -&gt; 添加至Chrome</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>直接在需要测试的页面上点击Lighthouse扩展工具</p><p><img src="/img/Snip20200410_1.png"></p><p>运行后，等待…然后会自动生成一个评估的html页面。</p><p>在评估页面里，可以看到它给的各个方面的建议，比如图片、css、js这些文件的处理，还有html里面标签的使用，缓存处理等建议，可以根据这些来对网站进行优化。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac在当前文件夹打开命令行终端小工具推荐</title>
    <link href="/2020/02/26/Mac%E5%9C%A8%E5%BD%93%E5%89%8D%E6%96%87%E4%BB%B6%E5%A4%B9%E6%89%93%E5%BC%80%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BB%88%E7%AB%AF%E5%B0%8F%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/"/>
    <url>/2020/02/26/Mac%E5%9C%A8%E5%BD%93%E5%89%8D%E6%96%87%E4%BB%B6%E5%A4%B9%E6%89%93%E5%BC%80%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BB%88%E7%AB%AF%E5%B0%8F%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/</url>
    
    <content type="html"><![CDATA[<p>开发很常要用到命令行终端，定位文件夹路径很麻烦，以下小工具可以快速在当前文件夹打开命令行终端，很方便。</p><ul><li><a href="https://zipzapmac.com/Go2Shell">Go2Shell</a></li><li><a href="https://github.com/Lyptik/go-2-iTerm/releases">go-2-iTerm</a></li></ul><h1 id="Go2Shell添加方法"><a href="#Go2Shell添加方法" class="headerlink" title="Go2Shell添加方法"></a>Go2Shell添加方法</h1><p>下载安装后，点击运行，可以选择添加到Finder工具栏，</p><p><img src="/img/WechatIMG107.png"></p><p>以后想在哪个文件夹运行命令行终端，只要点击Go2Shell在工具栏的小图标就行。</p><p><img src="/img/WechatIMG108.png"></p><h1 id="go-2-iTerm添加方法"><a href="#go-2-iTerm添加方法" class="headerlink" title="go-2-iTerm添加方法"></a>go-2-iTerm添加方法</h1><p>下载后解压，把app文件拖入应用程序里面，然后按住command键，拖动go-2-iTerm的图标到Finder工具栏。以后想在哪个文件夹运行命令行终端，只要点击go-2-iTerm在工具栏的小图标就行。</p><p><img src="/img/WechatIMG109.png"></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分享</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>普通web项目（非webpack打包）用flexible进行响应式改造的方法</title>
    <link href="/2019/07/02/%E6%99%AE%E9%80%9Aweb%E9%A1%B9%E7%9B%AE%EF%BC%88%E9%9D%9Ewebpack%E6%89%93%E5%8C%85%EF%BC%89%E7%94%A8flexible%E8%BF%9B%E8%A1%8C%E5%93%8D%E5%BA%94%E5%BC%8F%E6%94%B9%E9%80%A0%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2019/07/02/%E6%99%AE%E9%80%9Aweb%E9%A1%B9%E7%9B%AE%EF%BC%88%E9%9D%9Ewebpack%E6%89%93%E5%8C%85%EF%BC%89%E7%94%A8flexible%E8%BF%9B%E8%A1%8C%E5%93%8D%E5%BA%94%E5%BC%8F%E6%94%B9%E9%80%A0%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>主要是要对项目里面的css进行改造。把px转为rem。</p><h2 id="1、保证每个html页面引入flexible-js文件"><a href="#1、保证每个html页面引入flexible-js文件" class="headerlink" title="1、保证每个html页面引入flexible.js文件"></a>1、保证每个html页面引入flexible.js文件</h2><p><a href="https://github.com/liyoro/flexible-web">flexible.js</a> 需进行改造才能适用于电脑屏幕</p><h2 id="2、css中px转为rem"><a href="#2、css中px转为rem" class="headerlink" title="2、css中px转为rem"></a>2、css中px转为rem</h2><p><a href="https://github.com/MatthewKosloski/pixem">自动转换工具</a></p><p>此工具按照说明操作即可，不用自己手动一个个把px转为rem</p><h2 id="3、echarts图表的适配使用"><a href="#3、echarts图表的适配使用" class="headerlink" title="3、echarts图表的适配使用"></a>3、echarts图表的适配使用</h2><p>echarts图表使用的是px单位，工程中在上述步骤后，使用的是rem单位，所以要对echarts的数值相关配置进行转换，不然图表样式会混乱。</p><p>转换方法代码：</p><figure class="highlight arcade"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">remToPx</span>(<span class="hljs-params">rem</span>) &#123;<br>  <span class="hljs-keyword">var</span> fontSize = document.documentElement.style.fontSize;<br>    <span class="hljs-keyword">return</span> Math.<span class="hljs-built_in">floor</span>(rem * fontSize.<span class="hljs-built_in">replace</span>(<span class="hljs-string">&#x27;px&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>echarts图表的配置代码里面，数值相关：fontsize、lineHeight、right、left、top、bottom、padding、barWidth等等直接用remToPx(rem值)替代。</p><p>例如：一个基于1920x1080像素的设计，换算基数是192</p><p>未转换前写法：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">fontsize</span>: <span class="hljs-number">12</span>px<br><span class="hljs-attribute">lineHeight</span>: <span class="hljs-number">30</span>px<br></code></pre></td></tr></table></figure><p>12px的rem值是0.0625，30px的rem值是0.1563。这些值可以通过步骤2的工具转换。</p><p>转换后写法：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">fontsize</span>: remToPx(<span class="hljs-number">0</span>.<span class="hljs-number">0625</span>)<br><span class="hljs-attribute">lineHeight</span>: remToPx(<span class="hljs-number">0</span>.<span class="hljs-number">1563</span>)<br></code></pre></td></tr></table></figure><h2 id="4、按实际效果对css进行微调"><a href="#4、按实际效果对css进行微调" class="headerlink" title="4、按实际效果对css进行微调"></a>4、按实际效果对css进行微调</h2><p>以上，基本可以实现html页面的响应式了，测试可用。尚未对具体老生产项目进行，慎用。</p><h2 id="5、缺点"><a href="#5、缺点" class="headerlink" title="5、缺点"></a>5、缺点</h2><p>echarts图表在浏览器大小变化后需要刷新界面才会完美，不大自动。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>惠州大南山</title>
    <link href="/2019/05/01/%E6%83%A0%E5%B7%9E%E5%A4%A7%E5%8D%97%E5%B1%B1/"/>
    <url>/2019/05/01/%E6%83%A0%E5%B7%9E%E5%A4%A7%E5%8D%97%E5%B1%B1/</url>
    
    <content type="html"><![CDATA[<p>很漂亮的山，位于惠州市惠东县。<br>现在山上挖了很多路了，破坏了不少风景，希望以后不会太糟糕吧！不然真的太可惜了</p><p>手机拍的风景，没现场好看。</p><p><img src="/img/IMG_1792.jpg"></p><p><img src="/img/IMG_8994.jpg"></p><p><img src="/img/IMG_6279.jpg"> </p>]]></content>
    
    
    <categories>
      
      <category>旅行</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旅行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>remove-bg（好玩工具推荐）</title>
    <link href="/2019/04/01/remove-bg/"/>
    <url>/2019/04/01/remove-bg/</url>
    
    <content type="html"><![CDATA[<p>这款工具能帮你快速移除任何图片的背景。<a href="https://www.remove.bg/">remove.bg</a></p><p>试了下，去除掉背景的图片质量稍有下降，去除的背景有细微的不完美。不过真的可以去除背景。</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分享</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>广州好吃酸菜鱼排行榜</title>
    <link href="/2019/03/30/%E5%B9%BF%E5%B7%9E%E5%A5%BD%E5%90%83%E9%85%B8%E8%8F%9C%E9%B1%BC%E6%8E%92%E8%A1%8C%E6%A6%9C/"/>
    <url>/2019/03/30/%E5%B9%BF%E5%B7%9E%E5%A5%BD%E5%90%83%E9%85%B8%E8%8F%9C%E9%B1%BC%E6%8E%92%E8%A1%8C%E6%A6%9C/</url>
    
    <content type="html"><![CDATA[<p>只是我吃过的酸菜鱼，在自己心目中排个名而已。</p><h2 id="1、阿强家酸菜鱼-天河北店"><a href="#1、阿强家酸菜鱼-天河北店" class="headerlink" title="1、阿强家酸菜鱼(天河北店)"></a>1、阿强家酸菜鱼(天河北店)</h2><h4 id="地址：广州市天河区天河北路614号2楼"><a href="#地址：广州市天河区天河北路614号2楼" class="headerlink" title="地址：广州市天河区天河北路614号2楼"></a>地址：<a href="http://f.amap.com/4CeCd_0FB4yz4">广州市天河区天河北路614号2楼</a></h4><p>注意店铺名字，是阿强家，不是叫阿强，叫阿强的都是山寨货。虽然如今这家的酸菜鱼没以前口感好，但是色、香、味方面是目前我吃过的广州最好的。</p><p>酸菜鱼有皖鱼、鲈鱼、鲟龙鱼，越贵越好吃就对了。皖鱼以前是很少骨头的，现在不行了，很多骨刺。肉质方面，没以前鲜嫩了，有点软撇撇的，不知道是不是放久了……但是吃过很多次都如此。</p><p>每次必加龙口粉丝，早期的龙口粉丝比现在粗，很爽口。现在的稍微差一点了，店员说是同一家采购的。</p><p><img src="/img/IMG_1967.JPG"></p><p>这是我比较喜欢的一道菜：香辣牛展。点的时候可以叫服务员把香料和牛肉这样分开。不然捞好的牛展十分辣，不太适合我这样的广东人。</p><p><img src="/img/IMG_4587.JPG"></p><p>这是我比较喜欢的第二道菜：不辣的担担面。</p><p><img src="/img/IMG_5921.jpg"></p><p>这是我比较喜欢的第三道菜：口水鸡。口感没以前嫩，但是味道依然好。而且现在加了特效，蛮好玩的。</p><p><img src="/img/IMG_0161.gif"></p><p>此外，阿强家里面的很多东西都挺好吃的，可以一一尝试一下。</p><h2 id="2、太二酸菜鱼-骏壹万邦店"><a href="#2、太二酸菜鱼-骏壹万邦店" class="headerlink" title="2、太二酸菜鱼(骏壹万邦店)"></a>2、太二酸菜鱼(骏壹万邦店)</h2><h4 id="地址：曙光路81号骏壹万邦广场4楼"><a href="#地址：曙光路81号骏壹万邦广场4楼" class="headerlink" title="地址：曙光路81号骏壹万邦广场4楼"></a>地址：<a href="http://f.amap.com/TWpr_098500e">曙光路81号骏壹万邦广场4楼</a></h4><p>这一家也是挺神奇的，可以说，除了酸菜鱼好吃，可以试试外，其他都一般般，可能我口味问题吧。汤底有菊花瓣。分量还蛮足的，就是有点贵了，相比来说。</p><h2 id="3、蓉鱼-天河万科店"><a href="#3、蓉鱼-天河万科店" class="headerlink" title="3、蓉鱼(天河万科店)"></a>3、蓉鱼(天河万科店)</h2><h4 id="地址：华观路1932号-天河万科广场五楼）521、522铺"><a href="#地址：华观路1932号-天河万科广场五楼）521、522铺" class="headerlink" title="地址：华观路1932号(天河万科广场五楼）521、522铺"></a>地址：<a href="http://f.amap.com/5Tt7K_00D6Zj7">华观路1932号(天河万科广场五楼）521、522铺</a></h4><p>这一家挺神奇的，可以说，除了酸菜鱼好吃，可以试试外，其他都一般般，可能我口味问题吧。</p><h2 id="4、酸的起酸菜鱼（天河北店）"><a href="#4、酸的起酸菜鱼（天河北店）" class="headerlink" title="4、酸的起酸菜鱼（天河北店）"></a>4、酸的起酸菜鱼（天河北店）</h2><h4 id="地址：天河北路601号华标广场F1"><a href="#地址：天河北路601号华标广场F1" class="headerlink" title="地址：天河北路601号华标广场F1"></a>地址：<a href="http://f.amap.com/4ctoh_0796qRr">天河北路601号华标广场F1</a></h4><p>因为阿强家没位置，来这里了，2家离的不远。这家经常有优惠活动。鱼的香、味有阿强家的9成，鱼肉的口感比阿强的好。可惜有鱼鳞。</p><h2 id="5、三傻老坛酸菜鱼"><a href="#5、三傻老坛酸菜鱼" class="headerlink" title="5、三傻老坛酸菜鱼"></a>5、三傻老坛酸菜鱼</h2><h4 id="地址：云城东路501号万达广场白云金街1层B区167-168号铺"><a href="#地址：云城东路501号万达广场白云金街1层B区167-168号铺" class="headerlink" title="地址：云城东路501号万达广场白云金街1层B区167-168号铺"></a>地址：<a href="http://f.amap.com/s66U_0606YIw">云城东路501号万达广场白云金街1层B区167-168号铺</a></h4><p>鱼的香、味有阿强家的7成吧，鱼肉的口感比阿强的好，很厚实。汤底有菊花瓣。</p><h2 id="6、太七老坛酸菜鱼（曜一城店）"><a href="#6、太七老坛酸菜鱼（曜一城店）" class="headerlink" title="6、太七老坛酸菜鱼（曜一城店）"></a>6、太七老坛酸菜鱼（曜一城店）</h2><h4 id="地址：天河区天河北路717号曜一城三楼自编D15单元"><a href="#地址：天河区天河北路717号曜一城三楼自编D15单元" class="headerlink" title="地址：天河区天河北路717号曜一城三楼自编D15单元"></a>地址：<a href="http://f.amap.com/2EQ1h_0526usy">天河区天河北路717号曜一城三楼自编D15单元</a></h4><p>鱼的香、味有阿强家的6成吧，鱼肉口感不错，汤底有菊花瓣。服务一般，要自己倒水喝。</p><h2 id="7、一哥酸菜鱼（广州长兴路店）"><a href="#7、一哥酸菜鱼（广州长兴路店）" class="headerlink" title="7、一哥酸菜鱼（广州长兴路店）"></a>7、一哥酸菜鱼（广州长兴路店）</h2><h4 id="地址：天河区长湴西大街优托邦旁夜市街A1档"><a href="#地址：天河区长湴西大街优托邦旁夜市街A1档" class="headerlink" title="地址：天河区长湴西大街优托邦旁夜市街A1档"></a>地址：<a href="http://f.amap.com/1ShXE_08F3Txo">天河区长湴西大街优托邦旁夜市街A1档</a></h4><p>算是四川的风味。量少，色、香、味都不行。鱼貌似加了很多嫩肉粉，没有鱼的鲜嫩，是加了料的那种嫩，不推荐吃，除非饿晕了。</p>]]></content>
    
    
    <categories>
      
      <category>美食</category>
      
    </categories>
    
    
    <tags>
      
      <tag>美食</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue CLI3 EsLint配置</title>
    <link href="/2019/03/29/Vue-CLI3-EsLint%E9%85%8D%E7%BD%AE/"/>
    <url>/2019/03/29/Vue-CLI3-EsLint%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h4 id="修改eslint的语法检测，文件为根目录下的-package-json文件（规则写在rules内）"><a href="#修改eslint的语法检测，文件为根目录下的-package-json文件（规则写在rules内）" class="headerlink" title="修改eslint的语法检测，文件为根目录下的 package.json文件（规则写在rules内）"></a>修改eslint的语法检测，文件为根目录下的 package.json文件（规则写在rules内）</h4><figure class="highlight avrasm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">rules:</span> &#123;<br>    <span class="hljs-string">&quot;规则名&quot;</span>: [规则值, 规则配置]<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="规则值："><a href="#规则值：" class="headerlink" title="规则值："></a>规则值：</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-string">&quot;off&quot;</span>或者<span class="hljs-number">0</span>    <span class="hljs-regexp">//</span>关闭规则关闭<br><span class="hljs-string">&quot;warn&quot;</span>或者<span class="hljs-number">1</span>    <span class="hljs-regexp">//</span>在打开的规则作为警告（不影响退出代码）<br><span class="hljs-string">&quot;error&quot;</span>或者<span class="hljs-number">2</span>    <span class="hljs-regexp">//</span>把规则作为一个错误（退出代码触发时为<span class="hljs-number">1</span>）<br></code></pre></td></tr></table></figure><h4 id="eslint-规则配置参数"><a href="#eslint-规则配置参数" class="headerlink" title="eslint 规则配置参数"></a>eslint 规则配置参数</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-string">&quot;no-alert&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>禁止使用alert confirm prompt<br><span class="hljs-string">&quot;no-array-constructor&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止使用数组构造器<br><span class="hljs-string">&quot;no-bitwise&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>禁止使用按位运算符<br><span class="hljs-string">&quot;no-caller&quot;</span>: <span class="hljs-number">1</span>,<span class="hljs-regexp">//</span>禁止使用arguments.caller或arguments.callee<br><span class="hljs-string">&quot;no-catch-shadow&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止catch子句参数与外部作用域变量同名<br><span class="hljs-string">&quot;no-class-assign&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止给类赋值<br><span class="hljs-string">&quot;no-cond-assign&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止在条件表达式中使用赋值语句<br><span class="hljs-string">&quot;no-console&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止使用console<br><span class="hljs-string">&quot;no-const-assign&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止修改const声明的变量<br><span class="hljs-string">&quot;no-constant-condition&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止在条件中使用常量表达式 <span class="hljs-keyword">if</span>(true) <span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>)<br><span class="hljs-string">&quot;no-continue&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>禁止使用<span class="hljs-keyword">continue</span><br><span class="hljs-string">&quot;no-control-regex&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止在正则表达式中使用控制字符<br><span class="hljs-string">&quot;no-debugger&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止使用debugger<br><span class="hljs-string">&quot;no-delete-var&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>不能对var声明的变量使用<span class="hljs-keyword">delete</span>操作符<br><span class="hljs-string">&quot;no-div-regex&quot;</span>: <span class="hljs-number">1</span>,<span class="hljs-regexp">//</span>不能使用看起来像除法的正则表达式<span class="hljs-regexp">/=foo/</span><br><span class="hljs-string">&quot;no-dupe-keys&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>在创建对象字面量时不允许键重复 &#123;a:<span class="hljs-number">1</span>,a:<span class="hljs-number">1</span>&#125;<br><span class="hljs-string">&quot;no-dupe-args&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>函数参数不能重复<br><span class="hljs-string">&quot;no-duplicate-case&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>switch中的case标签不能重复<br><span class="hljs-string">&quot;no-else-return&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>如果<span class="hljs-keyword">if</span>语句里面有return,后面不能跟<span class="hljs-keyword">else</span>语句<br><span class="hljs-string">&quot;no-empty&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>块语句中的内容不能为空<br><span class="hljs-string">&quot;no-empty-character-class&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>正则表达式中的[]内容不能为空<br><span class="hljs-string">&quot;no-empty-label&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止使用空label<br><span class="hljs-string">&quot;no-eq-null&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止对null使用==或!=运算符<br><span class="hljs-string">&quot;no-eval&quot;</span>: <span class="hljs-number">1</span>,<span class="hljs-regexp">//</span>禁止使用eval<br><span class="hljs-string">&quot;no-ex-assign&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止给catch语句中的异常参数赋值<br><span class="hljs-string">&quot;no-extend-native&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止扩展native对象<br><span class="hljs-string">&quot;no-extra-bind&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止不必要的函数绑定<br><span class="hljs-string">&quot;no-extra-boolean-cast&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止不必要的bool转换<br><span class="hljs-string">&quot;no-extra-parens&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止非必要的括号<br><span class="hljs-string">&quot;no-extra-semi&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止多余的冒号<br><span class="hljs-string">&quot;no-fallthrough&quot;</span>: <span class="hljs-number">1</span>,<span class="hljs-regexp">//</span>禁止switch穿透<br><span class="hljs-string">&quot;no-floating-decimal&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止省略浮点数中的<span class="hljs-number">0</span> .<span class="hljs-number">5</span> <span class="hljs-number">3</span>.<br><span class="hljs-string">&quot;no-func-assign&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止重复的函数声明<br><span class="hljs-string">&quot;no-implicit-coercion&quot;</span>: <span class="hljs-number">1</span>,<span class="hljs-regexp">//</span>禁止隐式转换<br><span class="hljs-string">&quot;no-implied-eval&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止使用隐式eval<br><span class="hljs-string">&quot;no-inline-comments&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>禁止行内备注<br><span class="hljs-string">&quot;no-inner-declarations&quot;</span>: [<span class="hljs-number">2</span>, <span class="hljs-string">&quot;functions&quot;</span>],<span class="hljs-regexp">//</span>禁止在块语句中使用声明（变量或函数）<br><span class="hljs-string">&quot;no-invalid-regexp&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止无效的正则表达式<br><span class="hljs-string">&quot;no-invalid-this&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止无效的this，只能用在构造器，类，对象字面量<br><span class="hljs-string">&quot;no-irregular-whitespace&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>不能有不规则的空格<br><span class="hljs-string">&quot;no-iterator&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止使用__iterator__ 属性<br><span class="hljs-string">&quot;no-label-var&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>label名不能与var声明的变量名相同<br><span class="hljs-string">&quot;no-labels&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止标签声明<br><span class="hljs-string">&quot;no-lone-blocks&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止不必要的嵌套块<br><span class="hljs-string">&quot;no-lonely-if&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止<span class="hljs-keyword">else</span>语句内只有<span class="hljs-keyword">if</span>语句<br><span class="hljs-string">&quot;no-loop-func&quot;</span>: <span class="hljs-number">1</span>,<span class="hljs-regexp">//</span>禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）<br><span class="hljs-string">&quot;no-mixed-requires&quot;</span>: [<span class="hljs-number">0</span>, false],<span class="hljs-regexp">//</span>声明时不能混用声明类型<br><span class="hljs-string">&quot;no-mixed-spaces-and-tabs&quot;</span>: [<span class="hljs-number">2</span>, false],<span class="hljs-regexp">//</span>禁止混用tab和空格<br><span class="hljs-string">&quot;linebreak-style&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-string">&quot;windows&quot;</span>],<span class="hljs-regexp">//</span>换行风格<br><span class="hljs-string">&quot;no-multi-spaces&quot;</span>: <span class="hljs-number">1</span>,<span class="hljs-regexp">//</span>不能用多余的空格<br><span class="hljs-string">&quot;no-multi-str&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>字符串不能用\换行<br><span class="hljs-string">&quot;no-multiple-empty-lines&quot;</span>: [<span class="hljs-number">1</span>, &#123;<span class="hljs-string">&quot;max&quot;</span>: <span class="hljs-number">2</span>&#125;],<span class="hljs-regexp">//</span>空行最多不能超过<span class="hljs-number">2</span>行<br><span class="hljs-string">&quot;no-native-reassign&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>不能重写native对象<br><span class="hljs-string">&quot;no-negated-in-lhs&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//i</span>n 操作符的左边不能有!<br><span class="hljs-string">&quot;no-nested-ternary&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>禁止使用嵌套的三目运算<br><span class="hljs-string">&quot;no-new&quot;</span>: <span class="hljs-number">1</span>,<span class="hljs-regexp">//</span>禁止在使用new构造一个实例后不赋值<br><span class="hljs-string">&quot;no-new-func&quot;</span>: <span class="hljs-number">1</span>,<span class="hljs-regexp">//</span>禁止使用new Function<br><span class="hljs-string">&quot;no-new-object&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止使用new Object()<br><span class="hljs-string">&quot;no-new-require&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止使用new require<br><span class="hljs-string">&quot;no-new-wrappers&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止使用new创建包装实例，new String new Boolean new Number<br><span class="hljs-string">&quot;no-obj-calls&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>不能调用内置的全局对象，比如Math() JSON()<br><span class="hljs-string">&quot;no-octal&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止使用八进制数字<br><span class="hljs-string">&quot;no-octal-escape&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止使用八进制转义序列<br><span class="hljs-string">&quot;no-param-reassign&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止给参数重新赋值<br><span class="hljs-string">&quot;no-path-concat&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>node中不能使用__dirname或__filename做路径拼接<br><span class="hljs-string">&quot;no-plusplus&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>禁止使用++，--<br><span class="hljs-string">&quot;no-process-env&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>禁止使用process.env<br><span class="hljs-string">&quot;no-process-exit&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>禁止使用process.<span class="hljs-keyword">exit</span>()<br><span class="hljs-string">&quot;no-proto&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止使用__proto__属性<br><span class="hljs-string">&quot;no-redeclare&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止重复声明变量<br><span class="hljs-string">&quot;no-regex-spaces&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止在正则表达式字面量中使用多个空格 <span class="hljs-regexp">/foo bar/</span><br><span class="hljs-string">&quot;no-restricted-modules&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>如果禁用了指定模块，使用就会报错<br><span class="hljs-string">&quot;no-return-assign&quot;</span>: <span class="hljs-number">1</span>,<span class="hljs-regexp">//</span>return 语句中不能有赋值表达式<br><span class="hljs-string">&quot;no-script-url&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>禁止使用javascript:void(<span class="hljs-number">0</span>)<br><span class="hljs-string">&quot;no-self-compare&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>不能比较自身<br><span class="hljs-string">&quot;no-sequences&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>禁止使用逗号运算符<br><span class="hljs-string">&quot;no-shadow&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>外部作用域中的变量不能与它所包含的作用域中的变量或参数同名<br><span class="hljs-string">&quot;no-shadow-restricted-names&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>严格模式中规定的限制标识符不能作为声明时的变量名使用<br><span class="hljs-string">&quot;no-spaced-func&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>函数调用时 函数名与()之间不能有空格<br><span class="hljs-string">&quot;no-sparse-arrays&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止稀疏数组， [<span class="hljs-number">1</span>,,<span class="hljs-number">2</span>]<br><span class="hljs-string">&quot;no-sync&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>nodejs 禁止同步方法<br><span class="hljs-string">&quot;no-ternary&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>禁止使用三目运算符<br><span class="hljs-string">&quot;no-trailing-spaces&quot;</span>: <span class="hljs-number">1</span>,<span class="hljs-regexp">//</span>一行结束后面不要有空格<br><span class="hljs-string">&quot;no-this-before-super&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>在调用super()之前不能使用this或super<br><span class="hljs-string">&quot;no-throw-literal&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止抛出字面量错误 throw <span class="hljs-string">&quot;error&quot;</span>;<br><span class="hljs-string">&quot;no-undef&quot;</span>: <span class="hljs-number">1</span>,<span class="hljs-regexp">//</span>不能有未定义的变量<br><span class="hljs-string">&quot;no-undef-init&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>变量初始化时不能直接给它赋值为undefined<br><span class="hljs-string">&quot;no-undefined&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>不能使用undefined<br><span class="hljs-string">&quot;no-unexpected-multiline&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>避免多行表达式<br><span class="hljs-string">&quot;no-underscore-dangle&quot;</span>: <span class="hljs-number">1</span>,<span class="hljs-regexp">//</span>标识符不能以_开头或结尾<br><span class="hljs-string">&quot;no-unneeded-ternary&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止不必要的嵌套 var isYes = answer === <span class="hljs-number">1</span> ? true : false;<br><span class="hljs-string">&quot;no-unreachable&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>不能有无法执行的代码<br><span class="hljs-string">&quot;no-unused-expressions&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止无用的表达式<br><span class="hljs-string">&quot;no-unused-vars&quot;</span>: [<span class="hljs-number">2</span>, &#123;<span class="hljs-string">&quot;vars&quot;</span>: <span class="hljs-string">&quot;all&quot;</span>, <span class="hljs-string">&quot;args&quot;</span>: <span class="hljs-string">&quot;after-used&quot;</span>&#125;],<span class="hljs-regexp">//</span>不能有声明后未被使用的变量或参数<br><span class="hljs-string">&quot;no-use-before-define&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>未定义前不能使用<br><span class="hljs-string">&quot;no-useless-call&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止不必要的call和apply<br><span class="hljs-string">&quot;no-void&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁用void操作符<br><span class="hljs-string">&quot;no-var&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>禁用var，用let和const代替<br><span class="hljs-string">&quot;no-warning-comments&quot;</span>: [<span class="hljs-number">1</span>, &#123; <span class="hljs-string">&quot;terms&quot;</span>: [<span class="hljs-string">&quot;todo&quot;</span>, <span class="hljs-string">&quot;fixme&quot;</span>, <span class="hljs-string">&quot;xxx&quot;</span>], <span class="hljs-string">&quot;location&quot;</span>: <span class="hljs-string">&quot;start&quot;</span> &#125;],<span class="hljs-regexp">//</span>不能有警告备注<br><span class="hljs-string">&quot;no-with&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁用with<br><br><span class="hljs-string">&quot;array-bracket-spacing&quot;</span>: [<span class="hljs-number">2</span>, <span class="hljs-string">&quot;never&quot;</span>],<span class="hljs-regexp">//</span>是否允许非空数组里面有多余的空格<br><span class="hljs-string">&quot;arrow-parens&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>箭头函数用小括号括起来<br><span class="hljs-string">&quot;arrow-spacing&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>=&gt;的前/后括号<br><span class="hljs-string">&quot;accessor-pairs&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>在对象中使用getter/setter<br><span class="hljs-string">&quot;block-scoped-var&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>块语句中使用var<br><span class="hljs-string">&quot;brace-style&quot;</span>: [<span class="hljs-number">1</span>, <span class="hljs-string">&quot;1tbs&quot;</span>],<span class="hljs-regexp">//</span>大括号风格<br><span class="hljs-string">&quot;callback-return&quot;</span>: <span class="hljs-number">1</span>,<span class="hljs-regexp">//</span>避免多次调用回调什么的<br><span class="hljs-string">&quot;camelcase&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>强制驼峰法命名<br><span class="hljs-string">&quot;comma-dangle&quot;</span>: [<span class="hljs-number">2</span>, <span class="hljs-string">&quot;never&quot;</span>],<span class="hljs-regexp">//</span>对象字面量项尾不能有逗号<br><span class="hljs-string">&quot;comma-spacing&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>逗号前后的空格<br><span class="hljs-string">&quot;comma-style&quot;</span>: [<span class="hljs-number">2</span>, <span class="hljs-string">&quot;last&quot;</span>],<span class="hljs-regexp">//</span>逗号风格，换行时在行首还是行尾<br><span class="hljs-string">&quot;complexity&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">11</span>],<span class="hljs-regexp">//</span>循环复杂度<br><span class="hljs-string">&quot;computed-property-spacing&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-string">&quot;never&quot;</span>],<span class="hljs-regexp">//</span>是否允许计算后的键名什么的<br><span class="hljs-string">&quot;consistent-return&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>return 后面是否允许省略<br><span class="hljs-string">&quot;consistent-this&quot;</span>: [<span class="hljs-number">2</span>, <span class="hljs-string">&quot;that&quot;</span>],<span class="hljs-regexp">//</span>this别名<br><span class="hljs-string">&quot;constructor-super&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>非派生类不能调用super，派生类必须调用super<br><span class="hljs-string">&quot;curly&quot;</span>: [<span class="hljs-number">2</span>, <span class="hljs-string">&quot;all&quot;</span>],<span class="hljs-regexp">//</span>必须使用 <span class="hljs-keyword">if</span>()&#123;&#125; 中的&#123;&#125;<br><span class="hljs-string">&quot;default-case&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>switch语句最后必须有default<br><span class="hljs-string">&quot;dot-location&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>对象访问符的位置，换行的时候在行首还是行尾<br><span class="hljs-string">&quot;dot-notation&quot;</span>: [<span class="hljs-number">0</span>, &#123; <span class="hljs-string">&quot;allowKeywords&quot;</span>: true &#125;],<span class="hljs-regexp">//</span>避免不必要的方括号<br><span class="hljs-string">&quot;eol-last&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>文件以单一的换行符结束<br><span class="hljs-string">&quot;eqeqeq&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>必须使用全等<br><span class="hljs-string">&quot;func-names&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>函数表达式必须有名字<br><span class="hljs-string">&quot;func-style&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-string">&quot;declaration&quot;</span>],<span class="hljs-regexp">//</span>函数风格，规定只能使用函数声明/函数表达式<br><span class="hljs-string">&quot;generator-star-spacing&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>生成器函数*的前后空格<br><span class="hljs-string">&quot;guard-for-in&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span><span class="hljs-keyword">for</span> <span class="hljs-keyword">in</span>循环要用<span class="hljs-keyword">if</span>语句过滤<br><span class="hljs-string">&quot;handle-callback-err&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>nodejs 处理错误<br><span class="hljs-string">&quot;id-length&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>变量名长度<br><span class="hljs-string">&quot;indent&quot;</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>],<span class="hljs-regexp">//</span>缩进风格<br><span class="hljs-string">&quot;init-declarations&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>声明时必须赋初值<br><span class="hljs-string">&quot;key-spacing&quot;</span>: [<span class="hljs-number">0</span>, &#123; <span class="hljs-string">&quot;beforeColon&quot;</span>: false, <span class="hljs-string">&quot;afterColon&quot;</span>: true &#125;],<span class="hljs-regexp">//</span>对象字面量中冒号的前后空格<br><span class="hljs-string">&quot;lines-around-comment&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>行前/行后备注<br><span class="hljs-string">&quot;max-depth&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">4</span>],<span class="hljs-regexp">//</span>嵌套块深度<br><span class="hljs-string">&quot;max-len&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">80</span>, <span class="hljs-number">4</span>],<span class="hljs-regexp">//</span>字符串最大长度<br><span class="hljs-string">&quot;max-nested-callbacks&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>],<span class="hljs-regexp">//</span>回调嵌套深度<br><span class="hljs-string">&quot;max-params&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">3</span>],<span class="hljs-regexp">//</span>函数最多只能有<span class="hljs-number">3</span>个参数<br><span class="hljs-string">&quot;max-statements&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">10</span>],<span class="hljs-regexp">//</span>函数内最多有几个声明<br><span class="hljs-string">&quot;new-cap&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用<br><span class="hljs-string">&quot;new-parens&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>new时必须加小括号<br><span class="hljs-string">&quot;newline-after-var&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>变量声明后是否需要空一行<br><span class="hljs-string">&quot;object-curly-spacing&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-string">&quot;never&quot;</span>],<span class="hljs-regexp">//</span>大括号内是否允许不必要的空格<br><span class="hljs-string">&quot;object-shorthand&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>强制对象字面量缩写语法<br><span class="hljs-string">&quot;one-var&quot;</span>: <span class="hljs-number">1</span>,<span class="hljs-regexp">//</span>连续声明<br><span class="hljs-string">&quot;operator-assignment&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-string">&quot;always&quot;</span>],<span class="hljs-regexp">//</span>赋值运算符 += -=什么的<br><span class="hljs-string">&quot;operator-linebreak&quot;</span>: [<span class="hljs-number">2</span>, <span class="hljs-string">&quot;after&quot;</span>],<span class="hljs-regexp">//</span>换行时运算符在行尾还是行首<br><span class="hljs-string">&quot;padded-blocks&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>块语句内行首行尾是否要空行<br><span class="hljs-string">&quot;prefer-const&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>首选const<br><span class="hljs-string">&quot;prefer-spread&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>首选展开运算<br><span class="hljs-string">&quot;prefer-reflect&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>首选Reflect的方法<br><span class="hljs-string">&quot;quotes&quot;</span>: [<span class="hljs-number">1</span>, <span class="hljs-string">&quot;single&quot;</span>],<span class="hljs-regexp">//</span>引号类型 `` <span class="hljs-string">&quot;&quot;</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-string">&quot;quote-props&quot;</span>:[<span class="hljs-number">2</span>, <span class="hljs-string">&quot;always&quot;</span>],<span class="hljs-regexp">//</span>对象字面量中的属性名是否强制双引号<br><span class="hljs-string">&quot;radix&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>parseInt必须指定第二个参数<br><span class="hljs-string">&quot;id-match&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>命名检测<br><span class="hljs-string">&quot;require-yield&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>生成器函数必须有yield<br><span class="hljs-string">&quot;semi&quot;</span>: [<span class="hljs-number">2</span>, <span class="hljs-string">&quot;always&quot;</span>],<span class="hljs-regexp">//</span>语句强制分号结尾<br><span class="hljs-string">&quot;semi-spacing&quot;</span>: [<span class="hljs-number">0</span>, &#123;<span class="hljs-string">&quot;before&quot;</span>: false, <span class="hljs-string">&quot;after&quot;</span>: true&#125;],<span class="hljs-regexp">//</span>分号前后空格<br><span class="hljs-string">&quot;sort-vars&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>变量声明时排序<br><span class="hljs-string">&quot;space-after-keywords&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-string">&quot;always&quot;</span>],<span class="hljs-regexp">//</span>关键字后面是否要空一格<br><span class="hljs-string">&quot;space-before-blocks&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-string">&quot;always&quot;</span>],<span class="hljs-regexp">//</span>不以新行开始的块&#123;前面要不要有空格<br><span class="hljs-string">&quot;space-before-function-paren&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-string">&quot;always&quot;</span>],<span class="hljs-regexp">//</span>函数定义时括号前面要不要有空格<br><span class="hljs-string">&quot;space-in-parens&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-string">&quot;never&quot;</span>],<span class="hljs-regexp">//</span>小括号里面要不要有空格<br><span class="hljs-string">&quot;space-infix-ops&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>中缀操作符周围要不要有空格<br><span class="hljs-string">&quot;space-return-throw-case&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>return throw case后面要不要加空格<br><span class="hljs-string">&quot;space-unary-ops&quot;</span>: [<span class="hljs-number">0</span>, &#123; <span class="hljs-string">&quot;words&quot;</span>: true, <span class="hljs-string">&quot;nonwords&quot;</span>: false &#125;],<span class="hljs-regexp">//</span>一元运算符的前/后要不要加空格<br><span class="hljs-string">&quot;spaced-comment&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>注释风格要不要有空格什么的<br><span class="hljs-string">&quot;strict&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>使用严格模式<br><span class="hljs-string">&quot;use-isnan&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>禁止比较时使用NaN，只能用isNaN()<br><span class="hljs-string">&quot;valid-jsdoc&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>jsdoc规则<br><span class="hljs-string">&quot;valid-typeof&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>必须使用合法的typeof的值<br><span class="hljs-string">&quot;vars-on-top&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-regexp">//</span>var必须放在作用域顶部<br><span class="hljs-string">&quot;wrap-iife&quot;</span>: [<span class="hljs-number">2</span>, <span class="hljs-string">&quot;inside&quot;</span>],<span class="hljs-regexp">//</span>立即执行函数表达式的小括号风格<br><span class="hljs-string">&quot;wrap-regex&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-regexp">//</span>正则表达式字面量用小括号包起来<br><span class="hljs-string">&quot;yoda&quot;</span>: [<span class="hljs-number">2</span>, <span class="hljs-string">&quot;never&quot;</span>]<span class="hljs-regexp">//</span>禁止尤达条件<br></code></pre></td></tr></table></figure><h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="https://www.jianshu.com/p/bfc7e7329cff">vue-cli3的eslint配置问题</a></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue-CLI-3.0图形化界面初试</title>
    <link href="/2019/03/18/Vue-CLI-3-0%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2%E5%88%9D%E8%AF%95/"/>
    <url>/2019/03/18/Vue-CLI-3-0%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2%E5%88%9D%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>系统版本 macOS Mojave 10.14</p><h2 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h2><p>根据官方文档推荐，选择了8.x版本的Node</p><p>Node 版本 v8.15.1</p><p>npm 版本 v6.4.1</p><p><a href="https://nodejs.org/dist/latest-v8.x/">node 8.x下载地址</a></p><h2 id="安装Vue-Cli"><a href="#安装Vue-Cli" class="headerlink" title="安装Vue-Cli"></a>安装Vue-Cli</h2><figure class="highlight autoit"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs autoit">npm install -g <span class="hljs-symbol">@vue</span>/cli<br><span class="hljs-meta"># OR</span><br>yarn <span class="hljs-keyword">global</span> add <span class="hljs-symbol">@vue</span>/cli<br></code></pre></td></tr></table></figure><h4 id="检查vue版本是否正确-3-x"><a href="#检查vue版本是否正确-3-x" class="headerlink" title="检查vue版本是否正确 (3.x)"></a>检查vue版本是否正确 (3.x)</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">vue <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><h2 id="图形化界面创建和管理项目"><a href="#图形化界面创建和管理项目" class="headerlink" title="图形化界面创建和管理项目"></a>图形化界面创建和管理项目</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">vue ui</span><br></code></pre></td></tr></table></figure><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p><img src="/img/Snip20190318_1.png"></p><p><img src="/img/Snip20190318_2.png"></p><p><img src="/img/Snip20190318_3.png"></p><p><img src="/img/Snip20190318_4.png"></p><p><img src="/img/Snip20190318_5.png"></p><p><img src="/img/Snip20190318_6.png"></p><p>这样就完成一个项目的新建了。</p><p>Vue-CLI-3.0的图形化界面，把项目需要的插件、依赖、运行、打包、发布等集成在一起了，稍微用了下，还是挺方便的，比2.x时期，不是一般的方便。各种技巧待慢慢发掘、尝试。</p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode--Beautify插件配置</title>
    <link href="/2019/02/28/VSCode-Beautify%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    <url>/2019/02/28/VSCode-Beautify%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h4 id="在工作目录下建立-jsbeautifyrc文件，输入以下内容"><a href="#在工作目录下建立-jsbeautifyrc文件，输入以下内容" class="headerlink" title="在工作目录下建立.jsbeautifyrc文件，输入以下内容"></a>在工作目录下建立.jsbeautifyrc文件，输入以下内容</h4><figure class="highlight json"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;brace_style&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;none,preserve-inline&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;indent_size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;indent_char&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot; &quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;jslint_happy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;unformatted&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;css&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;indent_size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li><p>brace_style，格式风格，详见官方说明（为避免和eslint默认检查冲突，建议此属性设置为 none,preserve-inline）</p></li><li><p>indent_size，缩进长度（为避免和eslint默认检查冲突，官方建议此属性设置为 2）</p></li><li><p>indent_char，缩进填充的内容</p></li><li><p>jslint_happy:true，若你要搭配jslint使用，请开启此选项</p></li><li><p>unformatted:[“a”, “pre”]，这里放不需要格式化的标签类型。注意template也是默认不格式化的，.vue的template标签如果需要格式化请在.jsbeautifyrc重新定义不带template的声明属性。</p></li></ul><h4 id="保存时自动格式化"><a href="#保存时自动格式化" class="headerlink" title="保存时自动格式化"></a>保存时自动格式化</h4><p>在VSCode的用户配置文件里添加</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">editor.formatOnSave:<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><p>在VSCode的键盘快捷方式文件里添加</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">&#123;<br>  <span class="hljs-string">&quot;key&quot;</span>: <span class="hljs-string">&quot;cmd+b&quot;</span>,<span class="hljs-regexp">//</span>自定义键位<br>  <span class="hljs-string">&quot;command&quot;</span>: <span class="hljs-string">&quot;HookyQR.beautify&quot;</span>,<br>  <span class="hljs-string">&quot;when&quot;</span>: <span class="hljs-string">&quot;editorFocus&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h4><ul><li><p>VSCode版本 1.31.1 (1.31.1)</p></li><li><p>用户配置文件所在（Code -&gt; Preferences -&gt; Settings -&gt; {}）</p></li><li><p>键盘快捷方式文件所在 (Code -&gt; Preferences -&gt; Keyboard Shortcuts -&gt; {})</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>VSCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VSCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的VSCode用到的插件</title>
    <link href="/2019/02/26/%E6%88%91%E7%9A%84VSCode%E7%94%A8%E5%88%B0%E7%9A%84%E6%8F%92%E4%BB%B6/"/>
    <url>/2019/02/26/%E6%88%91%E7%9A%84VSCode%E7%94%A8%E5%88%B0%E7%9A%84%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<ul><li><p>Auto Close Tag 自动闭合HTML标签</p></li><li><p>Auto Rename Tag 修改HTML标签时，自动修改匹配的标签</p></li><li><p>Bookmarks 添加行书签</p></li><li><p>Code Runner 运行选中代码段（支持大量语言，包括Node）</p></li><li><p>Color Highlight 颜色值在代码中高亮显示</p></li><li><p>Color Picker 拾色器</p></li><li><p>Document This 注释文档生成</p></li><li><p>ESLint ESLint插件，高亮提示</p></li><li><p>File Peek 根据路径字符串，快速定位到文件</p></li><li><p>HTML CSS Class Completion CSS class提示</p></li><li><p>HTML CSS Support css提示（支持vue）</p></li><li><p>HTMLHint HTML格式提示</p></li><li><p>JavaScript (ES6) code snippets ES6语法代码段</p></li><li><p>Live Server 开发html时的静态服务器，实时刷新页面</p></li><li><p>npm 运行npm命令</p></li><li><p>npm Intellisense 导入模块时，提示已安装模块名称</p></li><li><p>Path Autocomplete 路径完成提示</p></li><li><p>vscode-icons 文件图标，方便定位文件</p></li><li><p>vetur 目前比较好的Vue语法高亮</p></li><li><p>open in browser 懒得开浏览器用的</p></li><li><p>Angular TypeScript Snippets for VS Code</p></li><li><p>Angular VS Code TypeScript and HTML Snippets</p></li><li><p>Auto Import</p></li><li><p>Angular 2, 4 and (upcoming…) TypeScript, HTML Snippets for VS Code</p></li><li><p>Angular 2, 4 and (upcoming…) TypeScript, HTML Snippets for VS Code</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>VSCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VSCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>时间记---2017年3月~2018年4月</title>
    <link href="/2017/04/12/%E6%97%B6%E9%97%B4%E8%AE%B0/"/>
    <url>/2017/04/12/%E6%97%B6%E9%97%B4%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>只要每天花几分钟时间在这个程序上面点一点，你就能得到每天、每周、每月的时间统计结果，知道你的时间花在哪里了。并且程序里面有一些小小的数据统计，方便你知道自己的时间使用情况，进而优化自己的时间。</p><p>这是一个收费效率APP，上线苹果市场期间，总销量13.1k，多次进入苹果效率排行榜前百。<br>整个项目的设计、开发、美工都是我独立完成的。<br>当年看《奇特的一生》，刚好苹果的Swift语言出世，自学练手的，已经从入门到放弃！</p><p><img src="/img/0x0ss-P31.jpg"></p><p><img src="/img/0x0ss-P32.jpg"></p><p><img src="/img/0x0ss-P33.jpg"></p><p><img src="/img/0x0ss-P34.jpg"></p><p><img src="/img/0x0ss-P35.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>做过的项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>做过的项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>拾梦人---2015年2月~2016年11月</title>
    <link href="/2016/10/12/%E6%8B%BE%E6%A2%A6%E4%BA%BA/"/>
    <url>/2016/10/12/%E6%8B%BE%E6%A2%A6%E4%BA%BA/</url>
    
    <content type="html"><![CDATA[<p>拾梦人户外旅行网，是一个户外旅行约伴平台。当年很常参加户外活动，比较喜欢这个平台的活动，报名只可以网页报名或者android客户端报名，没iOS客户端感觉很不方便。于是用青花瓷抓包android相关http接口，仿造了一个iOS客户端。主要实现了活动列表、游记攻略、朋友圈、第三方登录与分享(微信、微博、QQ)等功能模块。没想到不少驴友用上了，虽然用的人少，但是很开心！ 这是我自己设计、开发、美工的一个客户端。上线苹果市场期间，总销量1.76k</p><blockquote><p>首页活动</p></blockquote><p><img src="/images/750x1334-1.png" alt="首页活动"></p><blockquote><p>活动报名</p></blockquote><p><img src="/images/750x1334-2.png" alt="活动报名"></p><blockquote><p>游记攻略</p></blockquote><p><img src="/images/750x1334-3.png" alt="游记攻略"></p><blockquote><p>关注的驴友团</p></blockquote><p><img src="/images/750x1334-4.png" alt="关注的驴友团"></p><blockquote><p>个人中心</p></blockquote><p><img src="/images/750x1334-5.png" alt="个人中心"></p>]]></content>
    
    
    <categories>
      
      <category>做过的项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>做过的项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>江西武功山</title>
    <link href="/2014/11/09/%E6%B1%9F%E8%A5%BF%E6%AD%A6%E5%8A%9F%E5%B1%B1/"/>
    <url>/2014/11/09/%E6%B1%9F%E8%A5%BF%E6%AD%A6%E5%8A%9F%E5%B1%B1/</url>
    
    <content type="html"><![CDATA[<p>很漂亮的山，位于江西省萍乡市芦溪县</p><p>手机拍的风景，没现场好看。</p><p><img src="/img/IMG_0514.jpeg"></p><p><img src="/img/IMG_0515.jpeg"></p><p><img src="/img/IMG_0516.jpeg"></p><p><img src="/img/IMG_0517.jpeg"></p>]]></content>
    
    
    <categories>
      
      <category>旅行</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旅行</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
